"use strict";(self.webpackChunktcadmin_docs=self.webpackChunktcadmin_docs||[]).push([[3544],{8100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=t(7624),r=t(2172);t(1268),t(5388),t(3717);const o={sidebar_position:23,sidebar_label:"Workshop Browser"},s="Workshop Browser",a={id:"using-tcadmin/steamcmd/workshop-browser",title:"Workshop Browser",description:"The Steam Workshop browser allows your users to download and install mods and maps from Steam with a single click. Each game handles Workshop mods differently. You must configure scripts that move the mod files to the correct location after it has been downloaded.",source:"@site/docs/using-tcadmin/steamcmd/workshop-browser.mdx",sourceDirName:"using-tcadmin/steamcmd",slug:"/using-tcadmin/steamcmd/workshop-browser",permalink:"/using-tcadmin/steamcmd/workshop-browser",draft:!1,unlisted:!1,editUrl:"https://github.com/TotalControlAdmin/tcadmin-docs/blob/master/docs/using-tcadmin/steamcmd/workshop-browser.mdx",tags:[],version:"current",lastUpdatedAt:1707174221,formattedLastUpdatedAt:"Feb 5, 2024",sidebarPosition:23,frontMatter:{sidebar_position:23,sidebar_label:"Workshop Browser"},sidebar:"tutorialSidebar",previous:{title:"SteamCmd",permalink:"/using-tcadmin/steamcmd/"},next:{title:"Common Errors",permalink:"/using-tcadmin/common-errors"}},l={},d=[{value:"Configure the Workshop Browser",id:"configure-the-workshop-browser",level:2},{value:"Script Events",id:"script-events",level:2},{value:"After Workshop Content Installed - Occurs after the content has been downloaded.",id:"after-workshop-content-installed---occurs-after-the-content-has-been-downloaded",level:3},{value:"After Workshop Content Uninstalled - Occurs after the content has been uninstalled.",id:"after-workshop-content-uninstalled---occurs-after-the-content-has-been-uninstalled",level:3},{value:"After Workshop Content Updated <code>(available in 2.0.131.3 and greater)</code> - Occurs after the content has been updated",id:"after-workshop-content-updated-available-in-201313-and-greater---occurs-after-the-content-has-been-updated",level:3},{value:"Before Workshop Automatic Update <code>(available in 2.0.144 and greater)</code>",id:"before-workshop-automatic-update-available-in-20144-and-greater",level:3},{value:"Sample Scripts",id:"sample-scripts",level:2},{value:"Ark Survival Evolved",id:"ark-survival-evolved",level:3},{value:"Windows Script",id:"windows-script",level:4},{value:"Linux Script",id:"linux-script",level:4},{value:"After Workshop Uninstall",id:"after-workshop-uninstall",level:4},{value:"After Workshop Update",id:"after-workshop-update",level:4},{value:"yes, even hidden code blocks!",id:"yes-even-hidden-code-blocks",level:4},{value:"Before Workshop Automatic Update",id:"before-workshop-automatic-update",level:4},{value:"Arma 3",id:"arma-3",level:3},{value:"After Workshop Content Installed",id:"after-workshop-content-installed",level:4},{value:"After Workshop Content Uninstalled",id:"after-workshop-content-uninstalled",level:4},{value:"Clear workshop mod variables",id:"clear-workshop-mod-variables",level:4},{value:"America&#39;s Army Proving Grounds",id:"americas-army-proving-grounds",level:3},{value:"After Workshop Content Installed, After Workshop Content Uninstalled",id:"after-workshop-content-installed-after-workshop-content-uninstalled",level:4},{value:"Broke Protocol: Online City RPG",id:"broke-protocol-online-city-rpg",level:3},{value:"After Workshop Content Installed",id:"after-workshop-content-installed-1",level:4},{value:"After Workshop Content Uninstalled",id:"after-workshop-content-uninstalled-1",level:4},{value:"Conan Exiles",id:"conan-exiles",level:3},{value:"After Workshop Content Installed",id:"after-workshop-content-installed-2",level:4},{value:"After Workshop Content Uninstalled",id:"after-workshop-content-uninstalled-2",level:4},{value:"After Workshop Content Updated",id:"after-workshop-content-updated",level:4},{value:"DayZ",id:"dayz",level:3},{value:"After Workshop Content Installed",id:"after-workshop-content-installed-3",level:4},{value:"After Workshop Content Uninstalled",id:"after-workshop-content-uninstalled-3",level:4},{value:"After Workshop Content Updated",id:"after-workshop-content-updated-1",level:4},{value:"Garry&#39;s Mod",id:"garrys-mod",level:3},{value:"After Workshop Content Installed",id:"after-workshop-content-installed-4",level:4},{value:"After Workshop Content Uninstalled",id:"after-workshop-content-uninstalled-4",level:4},{value:"Space Engineers",id:"space-engineers",level:3},{value:"After Workshop Content Installed",id:"after-workshop-content-installed-5",level:4},{value:"After Workshop Content Uninstalled",id:"after-workshop-content-uninstalled-5",level:4},{value:"Known Issues",id:"known-issues",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.M)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"workshop-browser",children:"Workshop Browser"}),"\n",(0,i.jsx)(n.p,{children:"The Steam Workshop browser allows your users to download and install mods and maps from Steam with a single click. Each game handles Workshop mods differently. You must configure scripts that move the mod files to the correct location after it has been downloaded."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Workshop_Browser",src:t(8380).c+"",width:"1564",height:"821"})}),"\n",(0,i.jsx)(n.h2,{id:"configure-the-workshop-browser",children:"Configure the Workshop Browser"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Go to ",(0,i.jsx)(n.code,{children:"System"})," (on left-hand navigation) > ",(0,i.jsx)(n.code,{children:"Settings"})," > ",(0,i.jsx)(n.code,{children:"Default Steam Settings"}),". Enter your Steam API key."]}),"\n",(0,i.jsxs)(n.li,{children:["Go to ",(0,i.jsx)(n.code,{children:"System"})," (on left-hand navigation) > ",(0,i.jsx)(n.code,{children:"Settings"})," > ",(0,i.jsx)(n.code,{children:"Games"})," > ",(0,i.jsx)(n.code,{children:"select the game"})," > ",(0,i.jsx)(n.code,{children:"Steam Settings"}),". Set the following values:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Store Id"})," - Set the game's id in the Steam store. For example: ",(0,i.jsx)(n.a,{href:"https://store.steampowered.com/app/4000/Garrys_Mod/",children:"https://store.steampowered.com/app/4000/Garrys_Mod/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Enable Workshop Browser"})," - Enables the Workshop browser."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Stop before installing Workshop content"})," - Specify if you want to stop the service before installing content."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Skip Workshop download"})," - If enabled the content is not downloaded automatically. Use this option if the game can download content automatically."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Workshop file id format"})," - Format used on the file id. For example if the file id needs @ at the beginning use ",(0,i.jsx)(n.code,{children:"@![FileId]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Workshop file id separator"})," - Specify the characters used to separate file ids. Use ",(0,i.jsx)(n.code,{children:"![NewLine]"})," to separate with a new line character."]}),"\n",(0,i.jsxs)(n.li,{children:["Go to ",(0,i.jsx)(n.code,{children:"System"})," (on left-hand navigation) > ",(0,i.jsx)(n.code,{children:"Settings"})," > ",(0,i.jsx)(n.code,{children:"Games"})," > ",(0,i.jsx)(n.code,{children:"select the game"})," > ",(0,i.jsx)(n.code,{children:"Feature Permissions"})," and enable W",(0,i.jsx)(n.code,{children:"orkshop browser for users"}),", ",(0,i.jsx)(n.code,{children:"resellers"})," and ",(0,i.jsx)(n.code,{children:"sub admins"}),". ",(0,i.jsx)(n.strong,{children:"(If you want to test this feature as admin don't enable these options)"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"script-events",children:"Script Events"}),"\n",(0,i.jsx)(n.h3,{id:"after-workshop-content-installed---occurs-after-the-content-has-been-downloaded",children:"After Workshop Content Installed - Occurs after the content has been downloaded."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Available objects: - ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-server",children:"ThisServer"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-game",children:"ThisGame"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-user",children:"ThisUser"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-service",children:"ThisService"})]}),"\n",(0,i.jsxs)(n.li,{children:["Available Variables:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileId"})," - The id of the Workshop content that was installed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileIds"})," - A list of currently installed file ids formatted and separated according to the game's configuration. It includes the file id that is being installed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileIdsArray"})," - An uint32 array of currently installed file ids. It includes the file id that is being installed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"InstallPath"})," - The folder where the content is downloaded. For example: ",(0,i.jsx)(n.code,{children:"ServiceRoot/steamapps/Workshop/content/STOREID/FILEID"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileUrl"})," - Url to download the file. If the content has more than 1 file this value is blank."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileName"})," - The filename according to the Steam API. The value is relative to the install path. If the content has more than 1 file this value is blank. For example: ",(0,i.jsx)(n.code,{children:"mymaps/aim_ak47_training_csgo.bsp"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileNameNoPath"})," - The filename without any paths. If the content has more than 1 file this value is blank. For example: `aim_ak47_training_csgo.bsp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileNameSavePath"})," - The full path where the single file is downloaded. For example ",(0,i.jsx)(n.code,{children:"ServiceRoot/steamapps/Workshop/content/STOREID/FILEID/mymaps/aim_ak47_training_csgo.bsp"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TagsArray"})," - A string array that contains the content's tags."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Tags"})," - A list of the content's tags separated by comma."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileTitle"})," - The content's name."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"after-workshop-content-uninstalled---occurs-after-the-content-has-been-uninstalled",children:"After Workshop Content Uninstalled - Occurs after the content has been uninstalled."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Available objects: - ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-server",children:"ThisServer"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-game",children:"ThisGame"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-user",children:"ThisUser"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-service",children:"ThisService"})]}),"\n",(0,i.jsxs)(n.li,{children:["Available Variables:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileId"})," - The id of the Workshop content that was uninstalled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileIds"})," - A list of currently installed file ids formatted and separated according to the game's configuration. It does not include the file id that is being uninstalled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileIdsArray"})," - An uint32 array of currently installed file ids. It does not include the file id that is being uninstalled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"InstallPath"})," - The folder where the content is located. For example: ",(0,i.jsx)(n.code,{children:"ServiceRoot/steamapps/Workshop/content/STOREID/FILEID"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileUrl"})," - Url to download the file. If the content has more than 1 file this value is blank."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileName"})," - The filename according to the Steam API. The value is relative to the install path. If the content has more than 1 file this value is blank. For example: ",(0,i.jsx)(n.code,{children:"mymaps/aim_ak47_training_csgo.bsp"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileNameNoPath"})," - The filename without any paths. If the content has more than 1 file this value is blank. For example: ",(0,i.jsx)(n.code,{children:"aim_ak47_training_csgo.bsp"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileNameSavePath"})," - The full path where the single file is downloaded. For example ",(0,i.jsx)(n.code,{children:"ServiceRoot/steamapps/Workshop/content/STOREID/FILEID/mymaps/aim_ak47_training_csgo.bsp"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TagsArray"})," - A string array that contains the content's tags."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Tags"})," - A list of the content's tags separated by comma."]}),"\n",(0,i.jsx)(n.li,{children:"FileTitle - The content's name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"after-workshop-content-updated-available-in-201313-and-greater---occurs-after-the-content-has-been-updated",children:["After Workshop Content Updated ",(0,i.jsx)(n.code,{children:"(available in 2.0.131.3 and greater)"})," - Occurs after the content has been updated"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"If the game's workshop update script is not configured the uninstall/install scripts will be executed."})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Available objects: - ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-server",children:"ThisServer"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-game",children:"ThisGame"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-user",children:"ThisUser"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-service",children:"ThisService"})]}),"\n",(0,i.jsxs)(n.li,{children:["Available Variables:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"FileId - The id of the Workshop content that was installed."}),"\n",(0,i.jsx)(n.li,{children:"FileIds - A list of currently installed file ids formatted and separated according to the game's configuration. It includes the file id that is being installed."}),"\n",(0,i.jsx)(n.li,{children:"FileIdsArray - An uint32 array of currently installed file ids. It includes the file id that is being installed."}),"\n",(0,i.jsxs)(n.li,{children:["InstallPath - The folder where the content is downloaded. For example: ",(0,i.jsx)(n.code,{children:"ServiceRoot/steamapps/Workshop/content/STOREID/FILEID"})]}),"\n",(0,i.jsx)(n.li,{children:"FileUrl - Url to download the file. If the content has more than 1 file this value is blank."}),"\n",(0,i.jsxs)(n.li,{children:["FileName - The filename according to the Steam API. The value is relative to the install path. If the content has more than 1 file this value is blank. For example: ",(0,i.jsx)(n.code,{children:"mymaps/aim_ak47_training_csgo.bsp"})]}),"\n",(0,i.jsx)(n.li,{children:"FileNameNoPath - The filename without any paths. If the content has more than 1 file this value is blank. For example: aim_ak47_training_csgo.bsp"}),"\n",(0,i.jsxs)(n.li,{children:["FileNameSavePath - The full path where the single file is downloaded. For example ",(0,i.jsx)(n.code,{children:"ServiceRoot/steamapps/Workshop/content/STOREID/FILEID/mymaps/aim_ak47_training_csgo.bsp"})]}),"\n",(0,i.jsx)(n.li,{children:"TagsArray - A string array that contains the content's tags."}),"\n",(0,i.jsx)(n.li,{children:"Tags - A list of the content's tags separated by comma."}),"\n",(0,i.jsx)(n.li,{children:"FileTitle - The content's name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"before-workshop-automatic-update-available-in-20144-and-greater",children:["Before Workshop Automatic Update ",(0,i.jsx)(n.code,{children:"(available in 2.0.144 and greater)"})]}),"\n",(0,i.jsx)(n.p,{children:"This event is executed when the service has a scheduled task for Workshop Update. Use it to send an update notification to the connected players."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Available objects: - ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-server",children:"ThisServer"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-game",children:"ThisGame"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-user",children:"ThisUser"}),", ",(0,i.jsx)(n.a,{href:"/customizations/scripts/script-objects/this-service",children:"ThisService"})]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"See the Ark scripts below for an example."})}),"\n",(0,i.jsx)(n.h2,{id:"sample-scripts",children:"Sample Scripts"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The Workshop browser downloads the content to ",(0,i.jsx)(n.code,{children:"ServiceRoot/steamapps/Workshop/content/STOREID/FILEID"}),". It is up to the administrator to configure a script that moves the files to the correct location and update the config file. Contact TCAdmin support if you need help creating a script."]})}),"\n",(0,i.jsx)(n.h3,{id:"ark-survival-evolved",children:"Ark Survival Evolved"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The parallel code in the after installed script below causes Mono to crash. ",(0,i.jsx)(n.strong,{children:"On Linux use the script in the Linux tab instead"})]})}),"\n",(0,i.jsx)(n.admonition,{title:"update notes",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Updated 2020/08/24. Fix for file ids > 2147483647 after this was fixed in the game"}),"\n",(0,i.jsx)(n.li,{children:"Updated 2020/07/07. Fix for file ids > 2147483647"}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"windows-script",children:"Windows Script"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Windows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Extract ",(0,i.jsx)(n.code,{children:".z"}),", copy to ",(0,i.jsx)(n.code,{children:"ShooterGame/Content/Mods"})," and update ",(0,i.jsx)(n.code,{children:"GameUserSettings.ini"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notes"})," - This script supports extraction of multiple files simultaneously. ",(0,i.jsx)(n.code,{children:"The default is 2"}),". You can increase it by editing this line near the bottom of the script."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Recommended parallelism value",type:"tip",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"options.MaxDegreeOfParallelism = 2"})})}),"\n",(0,i.jsx)(n.admonition,{title:"Change if you know what you are doing",type:"danger",children:(0,i.jsxs)(n.p,{children:["For VPS the recommended value is ",(0,i.jsx)(n.code,{children:"2"}),". For dedicated servers the recommended value is ",(0,i.jsx)(n.code,{children:"4"}),". The higher the value the faster the script will execute but it will require more CPU and disk. Set it too high and it might take even longer."]})}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\n \n \nfrom System.IO import Directory, File, Path, SearchOption\nfrom System import Environment, PlatformID, String, Exception\nfrom System.Text.RegularExpressions import Regex, RegexOptions, Match\n \n            \n \n#Support for parallel extraction\nclr.AddReference(\'System.Core\')\nfrom System.Collections.Generic import List\nfrom System import Action\nfrom System.Threading.Tasks import Parallel, ParallelOptions\n \nextractedcount=0\ntotalfilecount=0\nlastfileprogress=0\n########################################\n# https://github.com/TheCherry/ark-server-manager #\n########################################\nimport struct\nimport zlib\nimport sys\n \ndef str_to_l(st):\n    return struct.unpack(\'q\', st)[0]\n \ndef z_unpack(src, dst):\n    global extractedcount, totalfilecount, lastfileprogress\n    with open(src, \'rb\') as f_src:\n        with open(dst, \'wb\') as f_dst:\n            f_src.read(8)\n            size1 = str_to_l(f_src.read(8))\n            f_src.read(8)\n            size2 = str_to_l(f_src.read(8))\n            if(size1 == -1641380927):\n                size1 = 131072L\n            runs = (size2 + size1 - 1L) / size1\n            array = []\n            for i in range(runs):\n                array.append(f_src.read(8))\n                f_src.read(8)\n            for i in range(runs):\n                to_read = array[i]\n                compressed = f_src.read(str_to_l(to_read))\n                decompressed = zlib.decompress(compressed)\n                f_dst.write(decompressed)\n    Script.WriteToConsole("Extracted " + dst.Replace(ThisService.RootDirectory, ""))\n    File.Delete(src)\n    File.Delete(src + ".uncompressed_size")\n    extractedcount=extractedcount+1\n    progress=round((float(extractedcount)/totalfilecount)*100,0)\n    if progress > lastfileprogress + 4:\n      lastfileprogress=progress\n      ThisTaskStep.UpdateProgress(progress)\n      \n#######################################################################\n# https://github.com/barrycarey/Ark_Mod_Downloader/blob/master/Ark_Mod_Downloader.py #\n#######################################################################\nimport os\nimport struct\nfrom collections import OrderedDict\nmap_names = []\nmap_count=0\ntemp_mod_path = os.path.join(ThisService.RootDirectory, "ShooterGame/Content/Mods")\nmeta_data = OrderedDict([])\n \ndef parse_base_info(modid):\n        Script.WriteToConsole("[+] Collecting Mod Details From mod.info")\n \n        mod_info = os.path.join(temp_mod_path, modid, "mod.info")\n \n        if not os.path.isfile(mod_info):\n            raise Exception("[x] Failed to locate mod.info. Cannot Continue. Please try again.")\n            return False\n \n        with open(mod_info, "rb") as f:\n            read_ue4_string(f)\n            map_count = struct.unpack(\'i\', f.read(4))[0]\n \n            for i in range(map_count):\n                cur_map = read_ue4_string(f)\n                if cur_map:\n                    map_names.append(cur_map)\n \n        return True\n \ndef parse_meta_data(modid):\n        """\n        Parse the modmeta.info files and extract the key value pairs need to for the .mod file.\n        How To Parse modmeta.info:\n            1. Read 4 bytes to tell how many key value pairs are in the file\n            2. Read next 4 bytes tell us how many bytes to read ahead to get the key\n            3. Read ahead by the number of bytes retrieved from step 2\n            4. Read next 4 bytes to tell how many bytes to read ahead to get value\n            5. Read ahead by the number of bytes retrieved from step 4\n            6. Start at step 2 again\n        :return: Dict\n        """\n \n        print("[+] Collecting Mod Meta Data From modmeta.info")\n        print("[+] Located The Following Meta Data:")\n \n        mod_meta = os.path.join(temp_mod_path, modid, "modmeta.info")\n        if not os.path.isfile(mod_meta):\n            raise Exception("[x] Failed To Locate modmeta.info. Cannot continue without it. Please try again.")\n            return False\n \n        with open(mod_meta, "rb") as f:\n \n            total_pairs = struct.unpack(\'i\', f.read(4))[0]\n \n            for i in range(total_pairs):\n \n                key, value = "", ""\n \n                key_bytes = struct.unpack(\'i\', f.read(4))[0]\n                key_flag = False\n                if key_bytes < 0:\n                    key_flag = True\n                    key_bytes -= 1\n \n                if not key_flag and key_bytes > 0:\n \n                    raw = f.read(key_bytes)\n                    key = raw[:-1].decode()\n \n                value_bytes = struct.unpack(\'i\', f.read(4))[0]\n                value_flag = False\n                if value_bytes < 0:\n                    value_flag = True\n                    value_bytes -= 1\n \n                if not value_flag and value_bytes > 0:\n                    raw = f.read(value_bytes)\n                    value = raw[:-1].decode()\n \n                # TODO This is a potential issue if there is a key but no value\n                if key and value:\n                    Script.WriteToConsole("[!] " + key + ":" + value)\n                    meta_data[key] = value\n \n        return True\n \ndef create_mod_file(modid):\n        """\n        Create the .mod file.\n        This code is an adaptation of the code from Ark Server Launcher.  All credit goes to Face Wound on Steam\n        :return:\n        """\n        if not parse_base_info(modid) or not parse_meta_data(modid):\n            return False\n \n        print("[+] Writing .mod File")\n        with open(os.path.join(temp_mod_path, modid + ".mod"), "w+b") as f:\n \n            modid = int(modid)\n            if modid > 2147483647:\n              diff = modid-2147483647\n              modid = -2147483647 + diff - 2                                           \n            f.write(struct.pack(\'ixxxx\', modid))  # Needs 4 pad bits\n            write_ue4_string("ModName", f)\n            write_ue4_string("", f)\n \n            map_count = len(map_names)\n            f.write(struct.pack("i", map_count))\n \n            for m in map_names:\n                write_ue4_string(m, f)\n \n            # Not sure of the reason for this\n            num2 = 4280483635\n            f.write(struct.pack(\'I\', num2))\n            num3 = 2\n            f.write(struct.pack(\'i\', num3))\n \n            if "ModType" in meta_data:\n                mod_type = b\'1\'\n            else:\n                mod_type = b\'0\'\n \n            # TODO The packing on this char might need to be changed\n            f.write(struct.pack(\'p\', mod_type))\n            meta_length = len(meta_data)\n            f.write(struct.pack(\'i\', meta_length))\n \n            for k, v in meta_data.items():\n                write_ue4_string(k, f)\n                write_ue4_string(v, f)\n \n        return True\n \ndef read_ue4_string(file):\n        count = struct.unpack(\'i\', file.read(4))[0]\n        flag = False\n        if count < 0:\n            flag = True\n            count -= 1\n \n        if flag or count <= 0:\n            return ""\n \n        return file.read(count)[:-1].decode()\n \ndef write_ue4_string(string_to_write, file):\n        string_length = len(string_to_write) + 1\n        file.write(struct.pack(\'i\', string_length))\n        barray = bytearray(string_to_write, "utf-8")\n        file.write(barray)\n        file.write(struct.pack(\'p\', b\'0\'))\n \n###########################################\n###########################################\n###########################################\n \n# Only extract files the correct folder depending on operating system\noseditor="WindowsNoEditor" if Environment.OSVersion.Platform == PlatformID.Win32NT else "LinuxNoEditor"\nnoeditor=Path.Combine(InstallPath, oseditor )\n \n# Use other OS folder if it doesn\'t exist.\nif not Directory.Exists(noeditor) :\n  oseditor = "LinuxNoEditor" if Environment.OSVersion.Platform == PlatformID.Win32NT else "WindowsNoEditor"\n  noeditor = Path.Combine(InstallPath, oseditor)  \n \n# Extract and delete all .z files\nactions = List[Action]()\nfor zfile in Directory.GetFiles(noeditor, "*.z", SearchOption.AllDirectories):\n file=Path.Combine(Path.GetDirectoryName(zfile), Path.GetFileNameWithoutExtension(zfile))\n action=Action(lambda a=zfile, b=file: z_unpack(a, b))\n actions.Add(action)\n \noptions=ParallelOptions()\n#Extract 2 files at a time.\noptions.MaxDegreeOfParallelism = 2\ntotalfilecount=actions.Count\nThisTaskStep.WriteLog(String.Format("Extracting {0} files...", totalfilecount))\nThisTaskStep.UpdateProgress(0)\nParallel.Invoke(options, actions.ToArray())\n \n# Move folder to correct location. Delete if it already exists.\n# Define modid before FileId is altered so we write the correct id to inifile\nmodid = FileId\nif FileId > 2147483647:\n  diff = FileId-2147483647\n  FileId = -2147483647 + diff - 2\n \nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Content/Mods/{0}", modid))\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\nDirectory.Move(Path.Combine(InstallPath, oseditor), modfolder)\n \n# Update ini file\nserveros = "WindowsServer" if Environment.OSVersion.Platform == PlatformID.Win32NT else "LinuxServer"\ninifile = Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Saved/Config/{0}/GameUserSettings.ini", serveros))\npattern="ActiveMods[ \\t]*=[ \\t]*(?<ActiveMods>[0-9, \\t]*)"\nfilecontents = File.ReadAllText(inifile)\nmatch = Regex.Match(filecontents, pattern, RegexOptions.IgnoreCase)\nif match.Success :\n  activemods = match.Groups["ActiveMods"].Value\n  if String.IsNullOrEmpty(activemods) or activemods.IndexOf(modid.ToString()) == -1 :\n    if activemods.Length > 0 :\n      activemods = activemods + ","\n      activemods = activemods + modid.ToString()\n      filecontents=filecontents.Replace(match.Groups["ActiveMods"].Value, activemods)\n    else :\n      activemods = modid.ToString()\n      filecontents = filecontents.Substring(0, match.Groups["ActiveMods"].Index) + activemods + filecontents.Substring(match.Groups["ActiveMods"].Index)\n    File.WriteAllText(inifile, filecontents)\n \n#Create .mod\nparse_base_info(modid.ToString())\nparse_meta_data(modid.ToString())\ncreate_mod_file(modid.ToString())\n \n# Delete folder\nif Directory.Exists(InstallPath) :\n  Directory.Delete(InstallPath, True)\n'})})})]}),"\n",(0,i.jsx)(n.admonition,{title:"update notes",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Updated 2020/08/24. Fix for file ids > 2147483647 after game was fixed"}),"\n",(0,i.jsx)(n.li,{children:"Updated 2020/7/7. Fix for file ids > 2147483647"}),"\n",(0,i.jsx)(n.li,{children:"Updated 2020/6/9. Some Linux mods are placed in /downloads/ instead of /content/"}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"linux-script",children:"Linux Script"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Linux"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Extract ",(0,i.jsx)(n.code,{children:".z"}),", copy to ",(0,i.jsx)(n.code,{children:"ShooterGame/Content/Mods"})," and update ",(0,i.jsx)(n.code,{children:"GameUserSettings.ini"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\n   \nfrom System.IO import Directory, File, Path, SearchOption\nfrom System import Environment, PlatformID, String, Exception\nfrom System.Text.RegularExpressions import Regex, RegexOptions, Match\n   \nextractedcount=0\ntotalfilecount=0\nlastfileprogress=0\n   \n########################################\n# https://github.com/TheCherry/ark-server-manager #\n########################################\nimport struct\nimport zlib\nimport sys\n   \ndef str_to_l(st):\n    return struct.unpack(\'q\', st)[0]\n   \ndef z_unpack(src, dst):\n    global extractedcount, totalfilecount, lastfileprogress\n    with open(src, \'rb\') as f_src:\n        with open(dst, \'wb\') as f_dst:\n            f_src.read(8)\n            size1 = str_to_l(f_src.read(8))\n            f_src.read(8)\n            size2 = str_to_l(f_src.read(8))\n            if(size1 == -1641380927):\n                size1 = 131072L\n            runs = (size2 + size1 - 1L) / size1\n            array = []\n            for i in range(runs):\n                array.append(f_src.read(8))\n                f_src.read(8)\n            for i in range(runs):\n                to_read = array[i]\n                compressed = f_src.read(str_to_l(to_read))\n                decompressed = zlib.decompress(compressed)\n                f_dst.write(decompressed)\n    Script.WriteToConsole("Extracted " + dst.Replace(ThisService.RootDirectory, ""))\n    File.Delete(src)\n    File.Delete(src + ".uncompressed_size")\n    extractedcount=extractedcount+1\n    progress=round((float(extractedcount)/totalfilecount)*100,0)\n    if progress > lastfileprogress + 4:\n      lastfileprogress=progress\n      ThisTaskStep.UpdateProgress(progress)                \n   \n#######################################################################\n# https://github.com/barrycarey/Ark_Mod_Downloader/blob/master/Ark_Mod_Downloader.py #\n#######################################################################\nimport os\nimport struct\nfrom collections import OrderedDict\nmap_names = []\nmap_count=0\ntemp_mod_path = os.path.join(ThisService.RootDirectory, "ShooterGame/Content/Mods")\nmeta_data = OrderedDict([])\n   \ndef parse_base_info(modid):\n   \n        Script.WriteToConsole("[+] Collecting Mod Details From mod.info")\n   \n        mod_info = os.path.join(temp_mod_path, modid, "mod.info")\n   \n        if not os.path.isfile(mod_info):\n            Script.WriteToConsole("[x] Failed to locate mod.info. Cannot Continue.  Aborting")\n            return False\n   \n        with open(mod_info, "rb") as f:\n            read_ue4_string(f)\n            map_count = struct.unpack(\'i\', f.read(4))[0]\n   \n            for i in range(map_count):\n                cur_map = read_ue4_string(f)\n                if cur_map:\n                    map_names.append(cur_map)\n   \n        return True\n   \ndef parse_meta_data(modid):\n        """\n       Parse the modmeta.info files and extract the key value pairs need to for the .mod file.\n       How To Parse modmeta.info:\n           1. Read 4 bytes to tell how many key value pairs are in the file\n           2. Read next 4 bytes tell us how many bytes to read ahead to get the key\n           3. Read ahead by the number of bytes retrieved from step 2\n           4. Read next 4 bytes to tell how many bytes to read ahead to get value\n           5. Read ahead by the number of bytes retrieved from step 4\n           6. Start at step 2 again\n       :return: Dict\n       """\n   \n        print("[+] Collecting Mod Meta Data From modmeta.info")\n        print("[+] Located The Following Meta Data:")\n   \n        mod_meta = os.path.join(temp_mod_path, modid, "modmeta.info")\n        if not os.path.isfile(mod_meta):\n            Script.WriteToConsole("[x] Failed To Locate modmeta.info. Cannot continue without it.  Aborting")\n            return False\n   \n        with open(mod_meta, "rb") as f:\n   \n            total_pairs = struct.unpack(\'i\', f.read(4))[0]\n   \n            for i in range(total_pairs):\n   \n                key, value = "", ""\n   \n                key_bytes = struct.unpack(\'i\', f.read(4))[0]\n                key_flag = False\n                if key_bytes < 0:\n                    key_flag = True\n                    key_bytes -= 1\n   \n                if not key_flag and key_bytes > 0:\n   \n                    raw = f.read(key_bytes)\n                    key = raw[:-1].decode()\n   \n                value_bytes = struct.unpack(\'i\', f.read(4))[0]\n                value_flag = False\n                if value_bytes < 0:\n                    value_flag = True\n                    value_bytes -= 1\n   \n                if not value_flag and value_bytes > 0:\n                    raw = f.read(value_bytes)\n                    value = raw[:-1].decode()\n   \n                # TODO This is a potential issue if there is a key but no value\n                if key and value:\n                    Script.WriteToConsole("[!] " + key + ":" + value)\n                    meta_data[key] = value\n   \n        return True\n   \ndef create_mod_file(modid):\n        """\n       Create the .mod file.\n       This code is an adaptation of the code from Ark Server Launcher.  All credit goes to Face Wound on Steam\n       :return:\n       """\n        if not parse_base_info(modid) or not parse_meta_data(modid):\n            return False\n   \n        print("[+] Writing .mod File")\n        with open(os.path.join(temp_mod_path, modid + ".mod"), "w+b") as f:\n   \n            modid = int(modid)\n            if modid > 2147483647:\n              diff = modid-2147483647\n              modid = -2147483647 + diff - 2\n            f.write(struct.pack(\'ixxxx\', modid))  # Needs 4 pad bits\n            write_ue4_string("ModName", f)\n            write_ue4_string("", f)\n   \n            map_count = len(map_names)\n            f.write(struct.pack("i", map_count))\n   \n            for m in map_names:\n                write_ue4_string(m, f)\n   \n            # Not sure of the reason for this\n            num2 = 4280483635\n            f.write(struct.pack(\'I\', num2))\n            num3 = 2\n            f.write(struct.pack(\'i\', num3))\n   \n            if "ModType" in meta_data:\n                mod_type = b\'1\'\n            else:\n                mod_type = b\'0\'\n   \n            # TODO The packing on this char might need to be changed\n            f.write(struct.pack(\'p\', mod_type))\n            meta_length = len(meta_data)\n            f.write(struct.pack(\'i\', meta_length))\n   \n            for k, v in meta_data.items():\n                write_ue4_string(k, f)\n                write_ue4_string(v, f)\n   \n        return True\n   \ndef read_ue4_string(file):\n        count = struct.unpack(\'i\', file.read(4))[0]\n        flag = False\n        if count < 0:\n            flag = True\n            count -= 1\n   \n        if flag or count <= 0:\n            return ""\n   \n        return file.read(count)[:-1].decode()\n   \ndef write_ue4_string(string_to_write, file):\n        string_length = len(string_to_write) + 1\n        file.write(struct.pack(\'i\', string_length))\n        barray = bytearray(string_to_write, "utf-8")\n        file.write(barray)\n        file.write(struct.pack(\'p\', b\'0\'))\n   \n###########################################\n###########################################\n###########################################\n# If the content folder doesn\'t exist use downloads\nif not Directory.Exists(InstallPath) :\n  InstallPath=InstallPath.Replace("/content/", "/downloads/")\n   \n# Always use Windows files. Linux files cause the game server to crash at startup.\noseditor="WindowsNoEditor"\nnoeditor=Path.Combine(InstallPath, oseditor )\n   \n# Extract and delete all .z files\nzfiles=Directory.GetFiles(noeditor, "*.z", SearchOption.AllDirectories);\ntotalfilecount=zfiles.Count\nfor zfile in zfiles:\n  file=Path.Combine(Path.GetDirectoryName(zfile), Path.GetFileNameWithoutExtension(zfile))\n  z_unpack(zfile, file)\n  Script.WriteToConsole("Extracted " + file)\n  File.Delete(zfile)\n  File.Delete(zfile + ".uncompressed_size")\n   \n# Move folder to correct location. Delete if it already exists.\n# Define modid before FileId is altered so we write the correct id to inifile\nmodid = FileId\nif FileId > 2147483647:\n  diff = FileId-2147483647\n  FileId = -2147483647 + diff - 2\n   \nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Content/Mods/{0}", modid))\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\nDirectory.Move(Path.Combine(InstallPath, oseditor), modfolder)\n   \n# Update ini file\nserveros = "WindowsServer" if Environment.OSVersion.Platform == PlatformID.Win32NT else "LinuxServer"\ninifile = Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Saved/Config/{0}/GameUserSettings.ini", serveros))\npattern="ActiveMods[ \\t]*=[ \\t]*(?<ActiveMods>[0-9, \\t]*)"\nfilecontents = File.ReadAllText(inifile)\nmatch = Regex.Match(filecontents, pattern, RegexOptions.IgnoreCase)\nif match.Success :\n  activemods = match.Groups["ActiveMods"].Value\n  if String.IsNullOrEmpty(activemods) or activemods.IndexOf(modid.ToString()) == -1 :\n    if activemods.Length > 0 :\n      activemods = activemods + ","\n      activemods = activemods + modid.ToString()\n      filecontents=filecontents.Replace(match.Groups["ActiveMods"].Value, activemods)\n    else :\n      activemods = modid.ToString()\n      filecontents = filecontents.Substring(0, match.Groups["ActiveMods"].Index) + activemods + filecontents.Substring(match.Groups["ActiveMods"].Index)\n    File.WriteAllText(inifile, filecontents)\n   \n#Create .mod\nparse_base_info(modid.ToString())\nparse_meta_data(modid.ToString())\ncreate_mod_file(modid.ToString())\n   \n# Delete folder\nif Directory.Exists(InstallPath) :\n  Directory.Delete(InstallPath, True)\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"This script is the same as the install script except it does not update the .ini so it keeps the mod order."}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\n   \nfrom System.IO import Directory, File, Path, SearchOption\nfrom System import Environment, PlatformID, String, Exception\nfrom System.Text.RegularExpressions import Regex, RegexOptions, Match\n   \nextractedcount=0\ntotalfilecount=0\nlastfileprogress=0\n   \n########################################\n# https://github.com/TheCherry/ark-server-manager #\n########################################\nimport struct\nimport zlib\nimport sys\n   \ndef str_to_l(st):\n    return struct.unpack(\'q\', st)[0]\n   \ndef z_unpack(src, dst):\n    global extractedcount, totalfilecount, lastfileprogress\n    with open(src, \'rb\') as f_src:\n        with open(dst, \'wb\') as f_dst:\n            f_src.read(8)\n            size1 = str_to_l(f_src.read(8))\n            f_src.read(8)\n            size2 = str_to_l(f_src.read(8))\n            if(size1 == -1641380927):\n                size1 = 131072L\n            runs = (size2 + size1 - 1L) / size1\n            array = []\n            for i in range(runs):\n                array.append(f_src.read(8))\n                f_src.read(8)\n            for i in range(runs):\n                to_read = array[i]\n                compressed = f_src.read(str_to_l(to_read))\n                decompressed = zlib.decompress(compressed)\n                f_dst.write(decompressed)\n    Script.WriteToConsole("Extracted " + dst.Replace(ThisService.RootDirectory, ""))\n    File.Delete(src)\n    File.Delete(src + ".uncompressed_size")\n    extractedcount=extractedcount+1\n    progress=round((float(extractedcount)/totalfilecount)*100,0)\n    if progress > lastfileprogress + 4:\n      lastfileprogress=progress\n      ThisTaskStep.UpdateProgress(progress)                \n   \n#######################################################################\n# https://github.com/barrycarey/Ark_Mod_Downloader/blob/master/Ark_Mod_Downloader.py #\n#######################################################################\nimport os\nimport struct\nfrom collections import OrderedDict\nmap_names = []\nmap_count=0\ntemp_mod_path = os.path.join(ThisService.RootDirectory, "ShooterGame/Content/Mods")\nmeta_data = OrderedDict([])\n   \ndef parse_base_info(modid):\n   \n        Script.WriteToConsole("[+] Collecting Mod Details From mod.info")\n   \n        mod_info = os.path.join(temp_mod_path, modid, "mod.info")\n   \n        if not os.path.isfile(mod_info):\n            Script.WriteToConsole("[x] Failed to locate mod.info. Cannot Continue.  Aborting")\n            return False\n   \n        with open(mod_info, "rb") as f:\n            read_ue4_string(f)\n            map_count = struct.unpack(\'i\', f.read(4))[0]\n   \n            for i in range(map_count):\n                cur_map = read_ue4_string(f)\n                if cur_map:\n                    map_names.append(cur_map)\n   \n        return True\n   \ndef parse_meta_data(modid):\n        """\n       Parse the modmeta.info files and extract the key value pairs need to for the .mod file.\n       How To Parse modmeta.info:\n           1. Read 4 bytes to tell how many key value pairs are in the file\n           2. Read next 4 bytes tell us how many bytes to read ahead to get the key\n           3. Read ahead by the number of bytes retrieved from step 2\n           4. Read next 4 bytes to tell how many bytes to read ahead to get value\n           5. Read ahead by the number of bytes retrieved from step 4\n           6. Start at step 2 again\n       :return: Dict\n       """\n   \n        print("[+] Collecting Mod Meta Data From modmeta.info")\n        print("[+] Located The Following Meta Data:")\n   \n        mod_meta = os.path.join(temp_mod_path, modid, "modmeta.info")\n        if not os.path.isfile(mod_meta):\n            Script.WriteToConsole("[x] Failed To Locate modmeta.info. Cannot continue without it.  Aborting")\n            return False\n   \n        with open(mod_meta, "rb") as f:\n   \n            total_pairs = struct.unpack(\'i\', f.read(4))[0]\n   \n            for i in range(total_pairs):\n   \n                key, value = "", ""\n   \n                key_bytes = struct.unpack(\'i\', f.read(4))[0]\n                key_flag = False\n                if key_bytes < 0:\n                    key_flag = True\n                    key_bytes -= 1\n   \n                if not key_flag and key_bytes > 0:\n   \n                    raw = f.read(key_bytes)\n                    key = raw[:-1].decode()\n   \n                value_bytes = struct.unpack(\'i\', f.read(4))[0]\n                value_flag = False\n                if value_bytes < 0:\n                    value_flag = True\n                    value_bytes -= 1\n   \n                if not value_flag and value_bytes > 0:\n                    raw = f.read(value_bytes)\n                    value = raw[:-1].decode()\n   \n                # TODO This is a potential issue if there is a key but no value\n                if key and value:\n                    Script.WriteToConsole("[!] " + key + ":" + value)\n                    meta_data[key] = value\n   \n        return True\n   \ndef create_mod_file(modid):\n        """\n       Create the .mod file.\n       This code is an adaptation of the code from Ark Server Launcher.  All credit goes to Face Wound on Steam\n       :return:\n       """\n        if not parse_base_info(modid) or not parse_meta_data(modid):\n            return False\n   \n        print("[+] Writing .mod File")\n        with open(os.path.join(temp_mod_path, modid + ".mod"), "w+b") as f:\n   \n            modid = int(modid)\n            if modid > 2147483647:\n              diff = modid-2147483647\n              modid = -2147483647 + diff - 2\n            f.write(struct.pack(\'ixxxx\', modid))  # Needs 4 pad bits\n            write_ue4_string("ModName", f)\n            write_ue4_string("", f)\n   \n            map_count = len(map_names)\n            f.write(struct.pack("i", map_count))\n   \n            for m in map_names:\n                write_ue4_string(m, f)\n   \n            # Not sure of the reason for this\n            num2 = 4280483635\n            f.write(struct.pack(\'I\', num2))\n            num3 = 2\n            f.write(struct.pack(\'i\', num3))\n   \n            if "ModType" in meta_data:\n                mod_type = b\'1\'\n            else:\n                mod_type = b\'0\'\n   \n            # TODO The packing on this char might need to be changed\n            f.write(struct.pack(\'p\', mod_type))\n            meta_length = len(meta_data)\n            f.write(struct.pack(\'i\', meta_length))\n   \n            for k, v in meta_data.items():\n                write_ue4_string(k, f)\n                write_ue4_string(v, f)\n   \n        return True\n   \ndef read_ue4_string(file):\n        count = struct.unpack(\'i\', file.read(4))[0]\n        flag = False\n        if count < 0:\n            flag = True\n            count -= 1\n   \n        if flag or count <= 0:\n            return ""\n   \n        return file.read(count)[:-1].decode()\n   \ndef write_ue4_string(string_to_write, file):\n        string_length = len(string_to_write) + 1\n        file.write(struct.pack(\'i\', string_length))\n        barray = bytearray(string_to_write, "utf-8")\n        file.write(barray)\n        file.write(struct.pack(\'p\', b\'0\'))\n   \n###########################################\n###########################################\n###########################################\n# If the content folder doesn\'t exist use downloads\nif not Directory.Exists(InstallPath) :\n  InstallPath=InstallPath.Replace("/content/", "/downloads/")\n   \n# Always use Windows files. Linux files cause the game server to crash at startup.\noseditor="WindowsNoEditor"\nnoeditor=Path.Combine(InstallPath, oseditor )\n   \n# Extract and delete all .z files\nzfiles=Directory.GetFiles(noeditor, "*.z", SearchOption.AllDirectories);\ntotalfilecount=zfiles.Count\nfor zfile in zfiles:\n  file=Path.Combine(Path.GetDirectoryName(zfile), Path.GetFileNameWithoutExtension(zfile))\n  z_unpack(zfile, file)\n  Script.WriteToConsole("Extracted " + file)\n  File.Delete(zfile)\n  File.Delete(zfile + ".uncompressed_size")\n   \n# Move folder to correct location. Delete if it already exists.\n# Define modid before FileId is altered so we write the correct id to inifile\nmodid = FileId\nif FileId > 2147483647:\n  diff = FileId-2147483647\n  FileId = -2147483647 + diff - 2\n   \nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Content/Mods/{0}", modid))\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\nDirectory.Move(Path.Combine(InstallPath, oseditor), modfolder)\n   \n#Create .mod\nparse_base_info(modid.ToString())\nparse_meta_data(modid.ToString())\ncreate_mod_file(modid.ToString())\n   \n# Delete folder\nif Directory.Exists(InstallPath) :\n  Directory.Delete(InstallPath, True)\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-uninstall",children:"After Workshop Uninstall"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Delete mod from ShooterGame/Content/Mods and update GameUserSettings.ini"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Uninstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\n \nfrom System.IO import Path, Directory, File\nfrom System import Environment, PlatformID, String\nfrom System.Text.RegularExpressions import Regex, RegexOptions, Match\n \nmodid = FileId\nif FileId > 2147483647:\n  diff = FileId-2147483647\n  FileId = -2147483647 + diff - 2\n \n# Delete folder\nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Content/Mods/{0}", modid))\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\n \n#Delete .mod\nmodfile=Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Content/Mods/{0}.mod", modid))\nif File.Exists(modfile) :\n  File.Delete(modfile)\n \n# Update ini file\nserverfolder = "WindowsServer" if Environment.OSVersion.Platform == PlatformID.Win32NT else "LinuxServer"\ninifile = Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Saved/Config/{0}/GameUserSettings.ini", serverfolder))\npattern="ActiveMods[ \\t]*=[ \\t]*(?<ActiveMods>[0-9, \\t]*)"\nfilecontents = File.ReadAllText(inifile)\nmatch = Regex.Match(filecontents, pattern, RegexOptions.IgnoreCase)\nif match.Success :\n  activemods = match.Groups["ActiveMods"].Value\n  if activemods.IndexOf(modid.ToString()) != -1 :\n    activemods = activemods.Replace("," + modid.ToString(), String.Empty).Replace(modid.ToString() + ",", String.Empty).Replace(modid.ToString(), String.Empty)\n    filecontents=filecontents.Replace(match.Groups["ActiveMods"].Value, activemods)\n    File.WriteAllText(inifile, filecontents)\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-update",children:"After Workshop Update"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The parallel code in the ",(0,i.jsx)(n.strong,{children:"after updated"})," script below causes Mono to crash. For Linux please use the script above in the Linux tab"]})}),"\n",(0,i.jsx)(n.p,{children:"This script is the same as the install script except it does not update the .ini so it keeps the mod order."}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"yes-even-hidden-code-blocks",children:"yes, even hidden code blocks!"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\n \n \nfrom System.IO import Directory, File, Path, SearchOption\nfrom System import Environment, PlatformID, String, Exception\nfrom System.Text.RegularExpressions import Regex, RegexOptions, Match\n \n            \n \n#Support for parallel extraction\nclr.AddReference(\'System.Core\')\nfrom System.Collections.Generic import List\nfrom System import Action\nfrom System.Threading.Tasks import Parallel, ParallelOptions\n \nextractedcount=0\ntotalfilecount=0\nlastfileprogress=0\n########################################\n# https://github.com/TheCherry/ark-server-manager #\n########################################\nimport struct\nimport zlib\nimport sys\n \ndef str_to_l(st):\n    return struct.unpack(\'q\', st)[0]\n \ndef z_unpack(src, dst):\n    global extractedcount, totalfilecount, lastfileprogress\n    with open(src, \'rb\') as f_src:\n        with open(dst, \'wb\') as f_dst:\n            f_src.read(8)\n            size1 = str_to_l(f_src.read(8))\n            f_src.read(8)\n            size2 = str_to_l(f_src.read(8))\n            if(size1 == -1641380927):\n                size1 = 131072L\n            runs = (size2 + size1 - 1L) / size1\n            array = []\n            for i in range(runs):\n                array.append(f_src.read(8))\n                f_src.read(8)\n            for i in range(runs):\n                to_read = array[i]\n                compressed = f_src.read(str_to_l(to_read))\n                decompressed = zlib.decompress(compressed)\n                f_dst.write(decompressed)\n    Script.WriteToConsole("Extracted " + dst.Replace(ThisService.RootDirectory, ""))\n    File.Delete(src)\n    File.Delete(src + ".uncompressed_size")\n    extractedcount=extractedcount+1\n    progress=round((float(extractedcount)/totalfilecount)*100,0)\n    if progress > lastfileprogress + 4:\n      lastfileprogress=progress\n      ThisTaskStep.UpdateProgress(progress)\n      \n#######################################################################\n# https://github.com/barrycarey/Ark_Mod_Downloader/blob/master/Ark_Mod_Downloader.py #\n#######################################################################\nimport os\nimport struct\nfrom collections import OrderedDict\nmap_names = []\nmap_count=0\ntemp_mod_path = os.path.join(ThisService.RootDirectory, "ShooterGame/Content/Mods")\nmeta_data = OrderedDict([])\n \ndef parse_base_info(modid):\n        Script.WriteToConsole("[+] Collecting Mod Details From mod.info")\n \n        mod_info = os.path.join(temp_mod_path, modid, "mod.info")\n \n        if not os.path.isfile(mod_info):\n            raise Exception("[x] Failed to locate mod.info. Cannot Continue. Please try again.")\n            return False\n \n        with open(mod_info, "rb") as f:\n            read_ue4_string(f)\n            map_count = struct.unpack(\'i\', f.read(4))[0]\n \n            for i in range(map_count):\n                cur_map = read_ue4_string(f)\n                if cur_map:\n                    map_names.append(cur_map)\n \n        return True\n \ndef parse_meta_data(modid):\n        """\n        Parse the modmeta.info files and extract the key value pairs need to for the .mod file.\n        How To Parse modmeta.info:\n            1. Read 4 bytes to tell how many key value pairs are in the file\n            2. Read next 4 bytes tell us how many bytes to read ahead to get the key\n            3. Read ahead by the number of bytes retrieved from step 2\n            4. Read next 4 bytes to tell how many bytes to read ahead to get value\n            5. Read ahead by the number of bytes retrieved from step 4\n            6. Start at step 2 again\n        :return: Dict\n        """\n \n        print("[+] Collecting Mod Meta Data From modmeta.info")\n        print("[+] Located The Following Meta Data:")\n \n        mod_meta = os.path.join(temp_mod_path, modid, "modmeta.info")\n        if not os.path.isfile(mod_meta):\n            raise Exception("[x] Failed To Locate modmeta.info. Cannot continue without it. Please try again.")\n            return False\n \n        with open(mod_meta, "rb") as f:\n \n            total_pairs = struct.unpack(\'i\', f.read(4))[0]\n \n            for i in range(total_pairs):\n \n                key, value = "", ""\n \n                key_bytes = struct.unpack(\'i\', f.read(4))[0]\n                key_flag = False\n                if key_bytes < 0:\n                    key_flag = True\n                    key_bytes -= 1\n \n                if not key_flag and key_bytes > 0:\n \n                    raw = f.read(key_bytes)\n                    key = raw[:-1].decode()\n \n                value_bytes = struct.unpack(\'i\', f.read(4))[0]\n                value_flag = False\n                if value_bytes < 0:\n                    value_flag = True\n                    value_bytes -= 1\n \n                if not value_flag and value_bytes > 0:\n                    raw = f.read(value_bytes)\n                    value = raw[:-1].decode()\n \n                # TODO This is a potential issue if there is a key but no value\n                if key and value:\n                    Script.WriteToConsole("[!] " + key + ":" + value)\n                    meta_data[key] = value\n \n        return True\n \ndef create_mod_file(modid):\n        """\n        Create the .mod file.\n        This code is an adaptation of the code from Ark Server Launcher.  All credit goes to Face Wound on Steam\n        :return:\n        """\n        if not parse_base_info(modid) or not parse_meta_data(modid):\n            return False\n \n        print("[+] Writing .mod File")\n        with open(os.path.join(temp_mod_path, modid + ".mod"), "w+b") as f:\n \n            modid = int(modid)\n            if modid > 2147483647:\n              diff = modid-2147483647\n              modid = -2147483647 + diff - 2                                           \n            f.write(struct.pack(\'ixxxx\', modid))  # Needs 4 pad bits\n            write_ue4_string("ModName", f)\n            write_ue4_string("", f)\n \n            map_count = len(map_names)\n            f.write(struct.pack("i", map_count))\n \n            for m in map_names:\n                write_ue4_string(m, f)\n \n            # Not sure of the reason for this\n            num2 = 4280483635\n            f.write(struct.pack(\'I\', num2))\n            num3 = 2\n            f.write(struct.pack(\'i\', num3))\n \n            if "ModType" in meta_data:\n                mod_type = b\'1\'\n            else:\n                mod_type = b\'0\'\n \n            # TODO The packing on this char might need to be changed\n            f.write(struct.pack(\'p\', mod_type))\n            meta_length = len(meta_data)\n            f.write(struct.pack(\'i\', meta_length))\n \n            for k, v in meta_data.items():\n                write_ue4_string(k, f)\n                write_ue4_string(v, f)\n \n        return True\n \ndef read_ue4_string(file):\n        count = struct.unpack(\'i\', file.read(4))[0]\n        flag = False\n        if count < 0:\n            flag = True\n            count -= 1\n \n        if flag or count <= 0:\n            return ""\n \n        return file.read(count)[:-1].decode()\n \ndef write_ue4_string(string_to_write, file):\n        string_length = len(string_to_write) + 1\n        file.write(struct.pack(\'i\', string_length))\n        barray = bytearray(string_to_write, "utf-8")\n        file.write(barray)\n        file.write(struct.pack(\'p\', b\'0\'))\n \n###########################################\n###########################################\n###########################################\n \n# Only extract files the correct folder depending on operating system\noseditor="WindowsNoEditor" if Environment.OSVersion.Platform == PlatformID.Win32NT else "LinuxNoEditor"\nnoeditor=Path.Combine(InstallPath, oseditor )\n \n# Use other OS folder if it doesn\'t exist.\nif not Directory.Exists(noeditor) :\n  oseditor = "LinuxNoEditor" if Environment.OSVersion.Platform == PlatformID.Win32NT else "WindowsNoEditor"\n  noeditor = Path.Combine(InstallPath, oseditor)  \n \n# Extract and delete all .z files\nactions = List[Action]()\nfor zfile in Directory.GetFiles(noeditor, "*.z", SearchOption.AllDirectories):\n file=Path.Combine(Path.GetDirectoryName(zfile), Path.GetFileNameWithoutExtension(zfile))\n action=Action(lambda a=zfile, b=file: z_unpack(a, b))\n actions.Add(action)\n \noptions=ParallelOptions()\n#Extract 2 files at a time.\noptions.MaxDegreeOfParallelism = 2\ntotalfilecount=actions.Count\nThisTaskStep.WriteLog(String.Format("Extracting {0} files...", totalfilecount))\nThisTaskStep.UpdateProgress(0)\nParallel.Invoke(options, actions.ToArray())\n \n# Move folder to correct location. Delete if it already exists.\n# Define modid before FileId is altered so we write the correct id to inifile\nmodid = FileId\nif FileId > 2147483647:\n  diff = FileId-2147483647\n  FileId = -2147483647 + diff - 2\n \nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Content/Mods/{0}", modid))\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\nDirectory.Move(Path.Combine(InstallPath, oseditor), modfolder)\n \n#Create .mod\nparse_base_info(modid.ToString())\nparse_meta_data(modid.ToString())\ncreate_mod_file(modid.ToString())\n \n# Delete folder\nif Directory.Exists(InstallPath) :\n  Directory.Delete(InstallPath, True)\n'})})]})]}),"\n",(0,i.jsx)(n.h4,{id:"before-workshop-automatic-update",children:"Before Workshop Automatic Update"}),"\n",(0,i.jsx)(n.p,{children:"This script sends a message to players 5 minutes before doing an automatic update."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Broadcast a message, wait 5 minutes, save world"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," Before Workshop Automatic Update"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Checked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nclr.AddReference("TCAdmin.GameHosting.SDK")\nclr.AddReference("TCAdmin.Interfaces")\n \nfrom System.IO import File, Path\nfrom System.Text.RegularExpressions import Regex, RegexOptions\nfrom System import Environment, PlatformID, String\nfrom System.Threading import Thread\nfrom TCAdmin.GameHosting.SDK import rconClient\nfrom TCAdmin.GameHosting.SDK import RCONGameType\nfrom TCAdmin.Interfaces.Server import ServiceStatus\n \nif ThisService.Status.ServiceStatus != ServiceStatus.Running :\n  Script.WriteToConsole(String.Format("{0} is stopped. The script will not continue.", ThisService.ConnectionInfo))\n  Script.Exit()\n \nserveros = "WindowsServer" if Environment.OSVersion.Platform == PlatformID.Win32NT else "LinuxServer"\ninifile = Path.Combine(ThisService.RootDirectory, String.Format("ShooterGame/Saved/Config/{0}/GameUserSettings.ini", serveros))\n \npattern="ServerAdminPassword[ \\t]*=[ \\t]*[\\"]?(?<ServerAdminPassword>([^\\"\\r\\n])*)[\\"]?"\nfilecontents = File.ReadAllText(inifile)\nmatch = Regex.Match(filecontents, pattern, RegexOptions.IgnoreCase)\n \nif match.Success :\n  rconpass = match.Groups["ServerAdminPassword"].Value\n  Script.WriteToConsole(String.Format("RCon password is: {0}", rconpass))\n   \n  rconclient=rconClient()\n  rconclient.GameType = RCONGameType.CounterStrikeSource\n  rconclient.Server = ThisService.IpAddress\n  rconclient.Port = ThisService.RConPort\n  Script.WriteToConsole("Sending update notification...")\n  rconclient.Send(None, None, rconpass, "broadcast \\"Server will update mods in 5 minutes!\\"")\n  Script.WriteToConsole(String.Format("RCon Response: {0}", rconclient.ReadResponse()))\n  Script.WriteToConsole("Waiting for 5 minutes...")\n  Thread.Sleep(300000)\n  Script.WriteToConsole("Saving world...")\n  rconclient.Send(None, None, rconpass, "saveworld")\n  Script.WriteToConsole(String.Format("RCon Response: {0}", rconclient.ReadResponse()))\n  Script.WriteToConsole("Done.")\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"arma-3",children:"Arma 3"}),"\n",(0,i.jsx)(n.admonition,{title:"ESSENTIAL PREREQUISITE'S",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Go to the game's settings. Add a variable named Mods and another named ServerMods."}),"\n",(0,i.jsxs)(n.li,{children:["Go to the game's command lines. Add the variables to the game's command line: ",(0,i.jsx)(n.code,{children:"-mod=![Mods]"})," ",(0,i.jsx)(n.code,{children:"-servermod=![ServerMods]"})]}),"\n",(0,i.jsxs)(n.li,{children:["Go to the game's steam settings. Set Workshop File Id Format to ",(0,i.jsx)(n.code,{children:"![FileId]"})," and Workshop File Id Separator to ;"]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-installed",children:"After Workshop Content Installed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Configure mod"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import Array, String\nfrom System.IO import File, Path, Directory, SearchOption\n  \nservertag="Server"\nservermods=""\nmods=""\n \nif ThisService.Variables.HasValue("ServerMods") :\n  servermods=ThisService.Variables["ServerMods"]\n \nif ThisService.Variables.HasValue("Mods") :\n  mods=ThisService.Variables["Mods"]\n   \nif Array.IndexOf(TagsArray, servertag) == -1 :\n  ThisService.Variables["Mods"]=String.Format("@{0}", FileId) + ";" + mods    \nelse :\n  ThisService.Variables["ServerMods"]=String.Format("@{0}", FileId) + ";" + servermods  \n \n# Move folder to correct location\nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("@{0}", FileId))\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\nDirectory.Move(InstallPath, modfolder)\n \n# Move keys to root key folder\nmodkeys=Path.Combine(modfolder, "keys")\nrootkeys=Path.Combine(ThisService.RootDirectory, "keys")\nDirectory.CreateDirectory(rootkeys)\nif Directory.Exists(modkeys) :\n  for file in Directory.GetFiles(modkeys, "*", SearchOption.AllDirectories):\n    keyfile = Path.Combine(rootkeys, Path.GetFileName(file))\n    if File.Exists(keyfile) :\n      File.Delete(keyfile)\n    File.Move(file, keyfile)\n \n# Move key to root key folder\nmodkeys=Path.Combine(modfolder, "key")\nif Directory.Exists(modkeys) :\n  for file in Directory.GetFiles(modkeys, "*", SearchOption.AllDirectories):\n    keyfile = Path.Combine(rootkeys, Path.GetFileName(file))\n    if File.Exists(keyfile) :\n      File.Delete(keyfile)\n    File.Move(file, keyfile)\n \n# Update command line\nThisService.Save()\nThisService.Configure()\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-uninstalled",children:"After Workshop Content Uninstalled"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Configure mod"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Uninstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import Array, String\nfrom System.IO import Path, Directory\n \nservermods=""\nmods=""\n \nif ThisService.Variables.HasValue("ServerMods") :\n  servermods=ThisService.Variables["ServerMods"]\n \nif ThisService.Variables.HasValue("Mods") :\n  mods=ThisService.Variables["Mods"]\n   \nThisService.Variables["ServerMods"]=servermods.Replace(String.Format("@{0};", FileId), "")\nThisService.Variables["Mods"]=mods.Replace(String.Format("@{0};", FileId), "")\n \n# Delete mod folder\nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("@{0}", FileId))\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\n \n# Update command line\nThisService.Save()\nThisService.Configure()\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"clear-workshop-mod-variables",children:"Clear workshop mod variables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Clear workshop mod variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Reinstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'ThisService.Variables["ServerMods"]=""\nThisService.Variables["Mods"]=""\nThisService.Save()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"americas-army-proving-grounds",children:"America's Army Proving Grounds"}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-installed-after-workshop-content-uninstalled",children:"After Workshop Content Installed, After Workshop Content Uninstalled"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Updates [SteamUGCManager.SteamUGCManager] in AASteamUGCManager.ini"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Events:"})," After Workshop Content Installed, After Workshop Content Uninstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nclr.AddReference("INIFileParser")\n \nfrom IniParser.Model.Configuration import IniParserConfiguration\nfrom IniParser.Parser import IniDataParser\nfrom IniParser import FileIniDataParser\nfrom System.IO import Path, File\nfrom System import String\n \n#Remove all keys from [SteamUGCManager.SteamUGCManager]\ninifile = Path.Combine(ThisService.RootDirectory, String.Format("AAGame/Config/ServerConfig/AASteamUGCManager.ini"))\niniconfig = IniParserConfiguration()\niniconfig.AllowDuplicateKeys = True\ndataparser = IniDataParser(iniconfig)\nini = FileIniDataParser(dataparser)\ndata = ini.ReadFile(inifile)\ndata["SteamUGCManager.SteamUGCManager"].RemoveAllKeys()\nini.WriteFile(inifile, data)\n \n#Add mods under [SteamUGCManager.SteamUGCManager]\ni=0\nitems=""\nwhile i < len(FileIdsArray):\n   items = items + String.Format("ServerSubscribedItems=(IdString={0})\\n",FileIdsArray[i])\n   i += 1\n \ncontents=File.ReadAllText(inifile)\ncontents=contents.Replace("[SteamUGCManager.SteamUGCManager]", "[SteamUGCManager.SteamUGCManager]\\n" + items)\nFile.WriteAllText(inifile, contents)\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"broke-protocol-online-city-rpg",children:"Broke Protocol: Online City RPG"}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-installed-1",children:"After Workshop Content Installed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Windows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Moves mod files."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," Batch"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"move /y %InstallPath% %ThisService_RootDirectory%\\AssetBundles\\%FileId%\n"})}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-uninstalled-1",children:"After Workshop Content Uninstalled"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Windows\n",(0,i.jsx)(n.strong,{children:"Description:"})," Delete mod files.\n",(0,i.jsx)(n.strong,{children:"Script Engine:"})," Batch\n",(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Uninstalled\n",(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"rd /q /s %ThisService_RootDirectory%\\AssetBundles\\%FileId%\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conan-exiles",children:"Conan Exiles"}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-installed-2",children:"After Workshop Content Installed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Moves mod files."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["These scripts have been updated to keep the order of ",(0,i.jsx)(n.code,{children:"modlist.txt"})]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import String\nfrom System.IO import Directory, File, Path, SearchOption, DirectoryInfo\n \nimport System\nclr.AddReference("System.Core")\nclr.ImportExtensions(System.Linq)\n \nmodpath = Path.Combine(ThisService.RootDirectory, "ConanSandbox", "Mods")\nDirectory.CreateDirectory(modpath)\n \n#Save a list of the mod\'s files so we can delete them when uninstalling the mod. \nmodpakfile = "";\nmodfilelist=Path.Combine(ThisService.RootDirectory, "ConanSandbox", "Mods", String.Format("{0}.txt", FileId))\nfor file in Directory.GetFiles(InstallPath, "*", SearchOption.AllDirectories):\n  modfile = Path.Combine(modpath, Path.GetFileName(file))\n  if(File.Exists(modfile)) :\n   File.Delete(modfile)\n  File.Move(file, modfile)\n  modfilename=Path.GetFileName(file)\n  File.AppendAllText(modfilelist, String.Format("{0}\\r", modfilename))\n  if Path.GetExtension(modfilename) == ".pak" :\n    modpakfile = modfilename\n \n#Create modlist.txt\nmodlisttxt=Path.Combine(modpath, "modlist.txt")\nif File.Exists(modlisttxt) :\n  lines = File.ReadAllLines(modlisttxt)\n  File.Delete(modlisttxt)\n  with File.AppendText(modlisttxt) as fs :\n    for line in lines :\n      fs.WriteLine(line)\n    \nwith File.AppendText(modlisttxt) as fs :\n  fs.WriteLine(modpakfile)\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-uninstalled-2",children:"After Workshop Content Uninstalled"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Delete mod files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Uninstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import String\nfrom System.IO import Directory, File, Path, SearchOption, DirectoryInfo\n \nimport System\nclr.AddReference("System.Core")\nclr.ImportExtensions(System.Linq)\n \nmodpath = Path.Combine(ThisService.RootDirectory, "ConanSandbox", "Mods")\nmodfilelist=Path.Combine(ThisService.RootDirectory, "ConanSandbox", "Mods", String.Format("{0}.txt", FileId))\n \nmodpakfile = "";\nif File.Exists(modfilelist) :\n  modfiles = File.ReadAllLines(modfilelist)\n  for modfile in modfiles :\n    if Path.GetExtension(modfile) == ".pak" :\n      modpakfile = modfile\n    modfile = Path.Combine(modpath, modfile)\n    if File.Exists(modfile) :\n      File.Delete(modfile)\n  File.Delete(modfilelist)\n  \n#Create modlist.txt\nmodlisttxt=Path.Combine(modpath, "modlist.txt")\nif(File.Exists(modlisttxt)) :\n  lines = File.ReadAllLines(modlisttxt).Where(lambda l: not l.Contains(modpakfile)).ToArray()\n  File.Delete(modlisttxt)\n  with File.AppendText(modlisttxt) as fs :\n    for line in lines :\n      fs.WriteLine(line)\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-updated",children:"After Workshop Content Updated"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Moves mod files."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Updated"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This is basically the install script but with the part that updates ",(0,i.jsx)(n.code,{children:"modlist.txt"})," removed so we don't lose the mod order."]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import String\nfrom System.IO import Directory, File, Path, SearchOption, DirectoryInfo\n \nimport System\nclr.AddReference("System.Core")\nclr.ImportExtensions(System.Linq)\n \nmodpath = Path.Combine(ThisService.RootDirectory, "ConanSandbox", "Mods")\nDirectory.CreateDirectory(modpath)\n \n#Save a list of the mod\'s files so we can delete them when uninstalling the mod. \nmodpakfile = "";\nmodfilelist=Path.Combine(ThisService.RootDirectory, "ConanSandbox", "Mods", String.Format("{0}.txt", FileId))\nfor file in Directory.GetFiles(InstallPath, "*", SearchOption.AllDirectories):\n  modfile = Path.Combine(modpath, Path.GetFileName(file))\n  if(File.Exists(modfile)) :\n   File.Delete(modfile)\n  File.Move(file, modfile)\n  modfilename=Path.GetFileName(file)\n  File.AppendAllText(modfilelist, String.Format("{0}\\r", modfilename))\n  if Path.GetExtension(modfilename) == ".pak" :\n    modpakfile = modfilename\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"dayz",children:"DayZ"}),"\n",(0,i.jsx)(n.admonition,{title:"ESSENTIAL PREREQUISITE'S",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a variable named ",(0,i.jsx)(n.code,{children:"Mods"})]}),"\n",(0,i.jsxs)(n.li,{children:["Add this to the command line: ",(0,i.jsx)(n.code,{children:"-mod=![Mods]"})]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-installed-3",children:"After Workshop Content Installed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," AfterWorkshopInstall"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import Array, String\nfrom System.IO import File, Path, Directory, SearchOption\nfrom System.Threading import Thread\nimport re\n \n# Setup variables\nservertag="Server"\nmods=""\ny=[]\nModName=""\n \n# Get commandline list of mods\nif ThisService.Variables.HasValue("Mods") :\n  mods=ThisService.Variables["Mods"]\nelse:\n  raise Exception("Missing Mod information. Installation Failed!")\n \n# Check for FileTitle\nif len(FileTitle) != 0:\n# Check FileTitle for special character\n  for i in range(len(FileTitle)):\n    if bool(re.search(\'[a-zA-Z0-9 \\]\\[_\\\'+-]\', FileTitle[i])) : \n      y.append(FileTitle[i])\n    else:\n      y.append("")\n         \n    ModName= "".join(str(x) for x in y)\n    ModName= ModName.Replace("  "," ").Replace(" ","_")\n    ModName= ModName.strip()\nelse:  \n   ModName = FileId\n   \nif (mods.find(\';\') != -1) :\n   ThisService.Variables["Mods"]=String.Format("@{0}", ModName) + ";" + mods   \nelse :  \n  if len(mods) > 0 :\n     ThisService.Variables["Mods"]=String.Format("@{0}", ModName) + ";" + mods   \n  else :\n     ThisService.Variables["Mods"]=String.Format("@{0}", ModName) + mods   \n       \nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("@{0}", ModName))\n   \n# If mod exists delete the folder\nif Directory.Exists(modfolder) : \n   Directory.Delete(modfolder, True)\n \n# Move mod to root using renamed file name as folder name \nDirectory.Move(InstallPath, modfolder)\n \n# Setup keys path to to copy .bikey file root \\keys folder\nmodkeys=Path.Combine(modfolder, "keys")\nrootkeys=Path.Combine(ThisService.RootDirectory, "keys")\n \n# Check for \\keys folder in root\nif not Directory.Exists(rootkeys) :\n  Directory.CreateDirectory(rootkeys)\n \n# Check for mod \\keys folder\n# Get list of all files on mods \\keys folder\n# Copy file(s) from mods \\keys folder to root \\keys folder\nif Directory.Exists(modkeys) :\n  for file in Directory.GetFiles(modkeys, "*", SearchOption.AllDirectories):\n    keyfile = Path.Combine(rootkeys, Path.GetFileName(file))\n    if not File.Exists(keyfile) :\n      File.Copy(file, keyfile)\n \n# Update command line\nThisService.Save()\nThisService.Configure()\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-uninstalled-3",children:"After Workshop Content Uninstalled"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," After Workshop Content Uninstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," AfterWorkshopUninstall"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import Array, String\nfrom System.IO import Directory, File, Path, SearchOption, DirectoryInfo\nimport re\n \n# Setup variables\nmods=""\nmlist=""\nlastmod=""\nModName=""\ny=[]\n \n# Check for Variable\n# Get commandline mods list\nif ThisService.Variables.HasValue("Mods") :\n  mods=ThisService.Variables["Mods"]\nelse:\n  raise Exception("Missing Mod information. Uninstall Failed!")\n \n# Check if the mod being uninstalled is the last mod or is the only mod in the commandline\n# Convert commandline modlist string to List\nmlist = mods.split(\'@\')\n \ndef is_last(alist,choice):\n  if choice == alist[-1]:\n    return True\n  else:\n    return False\n   \nif len(FileTitle) != 0:\n  for i in range(len(FileTitle)):\n    if bool(re.search(\'[a-zA-Z0-9 \\]\\[_\\\'+-]\', FileTitle[i])) : \n      y.append(FileTitle[i])\n    else:\n      y.append("")\n         \n    ModName= "".join(str(x) for x in y)\n    ModName= ModName.Replace("  "," ").Replace(" ","_")\n    ModName= ModName.strip()\nelse:\n  ModName = FileId\n \n# If mod to be uninstalled is the last mod set flag to true\nif is_last(mlist,ModName) == True :\n   lastmod = "y"\nelse:\n   lastmod = "n"\n                    \n# Remove mod name from commandline variable\n# If the mod is the last mod in the list or the only mod in the list remove FileTitle and not FileTitle;, \n#     attempting to remove FileTitle; will fail and the mod will not be removed from the commandline\n# If mod removal result; in only one mod being left make sure there is not trailing semi-colon\nif (mods.find(\';\') != -1) :\n  if lastmod == "n" :\n# Multiple mods not last mod\n     ThisService.Variables["Mods"]=mods.Replace(String.Format("@{0};", ModName), "")\n  else :\n# Last Mod in list\n     ThisService.Variables["Mods"]=mods.Replace(String.Format(";@{0}", ModName), "")\nelse :  \n# Only Mod\n  ThisService.Variables["Mods"]=mods.Replace(String.Format("@{0}", ModName), "")\n   \n# Setup folders for removal\nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("@{0}", ModName))\nmodkeys=Path.Combine(modfolder, "keys")\nrootkeys=Path.Combine(ThisService.RootDirectory, "keys")\n \n# Delete mod key files\nif Directory.Exists(modkeys) :\n  for file in Directory.GetFiles(modkeys, "*", SearchOption.AllDirectories):\n    keyfile = Path.Combine(rootkeys, Path.GetFileName(file))\n    File.Delete(keyfile)\n \n# Delete mod folder\nif Directory.Exists(modfolder) :\n  Directory.Delete(modfolder, True)\n \n# Becuase some devs develope more tyhan one mod and use the same .bikey file\n# Parse the mod folders and make sire the .bikey files are in the \\keys folder\n# If not copy the /bikey file\ndirinfo = DirectoryInfo(ThisService.RootDirectory)\nfor i in  dirinfo.GetDirectories("@*") :\n  modfolder=Path.Combine(ThisService.RootDirectory, i.Name)\n  modkeys=Path.Combine(modfolder, "keys")\n  if Directory.Exists(modkeys) :\n    for file in Directory.GetFiles(modkeys, "*", SearchOption.AllDirectories):\n      keyfile = Path.Combine(rootkeys, Path.GetFileName(file))\n      if not File.Exists(keyfile) :\n        File.Copy(file, keyfile)\n \n# Update command line\nThisService.Save()\nThisService.Configure()\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-updated-1",children:"After Workshop Content Updated"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," After Workshop Content Updated"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," AfterWorkshopUpdate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System import Array, String\nfrom System.IO import File, Path, Directory, SearchOption\nfrom System.Threading import Thread\nimport re\n  \n# Setup variables\nservertag="Server"\nmods=""\ny=[]\nModName=""\n  \n# Get commandline list of mods\nif ThisService.Variables.HasValue("Mods") :\n  mods=ThisService.Variables["Mods"]\nelse:\n  raise Exception("Missing Mod information. Installation Failed!")\n  \n# Check for FileTitle\nif len(FileTitle) != 0:\n# Check FileTitle for special character\n  for i in range(len(FileTitle)):\n    if bool(re.search(\'[a-zA-Z0-9 \\]\\[_\\\'+-]\', FileTitle[i])) : \n      y.append(FileTitle[i])\n    else:\n      y.append("")\n          \n    ModName= "".join(str(x) for x in y)\n    ModName= ModName.Replace("  "," ").Replace(" ","_")\n    ModName= ModName.strip()\nelse:  \n   ModName = FileId\n    \n        \nmodfolder=Path.Combine(ThisService.RootDirectory, String.Format("@{0}", ModName))\n    \n# If mod exists delete the folder\nif Directory.Exists(modfolder) : \n   Directory.Delete(modfolder, True)\n  \n# Move mod to root using renamed file name as folder name \nDirectory.Move(InstallPath, modfolder)\n  \n# Setup keys path to to copy .bikey file root \\keys folder\nmodkeys=Path.Combine(modfolder, "keys")\nrootkeys=Path.Combine(ThisService.RootDirectory, "keys")\n  \n# Check for \\keys folder in root\nif not Directory.Exists(rootkeys) :\n  Directory.CreateDirectory(rootkeys)\n  \n# Check for mod \\keys folder\n# Get list of all files on mods \\keys folder\n# Copy file(s) from mods \\keys folder to root \\keys folder\nif Directory.Exists(modkeys) :\n  for file in Directory.GetFiles(modkeys, "*", SearchOption.AllDirectories):\n    keyfile = Path.Combine(rootkeys, Path.GetFileName(file))\n    if not File.Exists(keyfile) :\n      File.Copy(file, keyfile)\n  \n# Update command line\nThisService.Save()\nThisService.Configure()\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"garrys-mod",children:"Garry's Mod"}),"\n",(0,i.jsx)(n.admonition,{title:"update notes",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Updated 2021/05/23. Fixed errors when file already exists. Gave execute permissions to bin/gmad_linux."}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-installed-4",children:"After Workshop Content Installed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," AfterWorkshopInstall"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"SHOW CODE BLOCK"})}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nclr.AddReference("TCAdmin.SDK")\nfrom System import Environment, PlatformID, String\nfrom System.IO import Directory, File, Path, SearchOption\nfrom System.Net import WebClient\nfrom System.Diagnostics import Process\nfrom TCAdmin.SDK.Misc import CompressionTools, Linux\n \naddon=Path.Combine(ThisService.RootDirectory, "garrysmod", "addons", FileId.ToString())\n \nurldownload=True;\n#File downloaded from Steam not from URL. Update variable values.\nif String.IsNullOrEmpty(FileUrl) :\n  for file in Directory.GetFiles(InstallPath) :\n    urldownload=False\n    FileName=Path.GetFileName(file)\n    FileNameNoPath=FileName\n    FileNameSavePath=file\n \n#Rename .gm to .gma\nif FileNameSavePath.EndsWith(".gm") :\n  if File.Exists(FileNameSavePath + "a") : \n    File.Delete(FileNameSavePath + "a")\n  File.Move(FileNameSavePath, FileNameSavePath + "a")\n  FileNameSavePath=FileNameSavePath + "a"\n  FileName=FileName + "a"\n  FileNameNoPath=FileNameNoPath + "a"\n \n#If not .gma just move to addons\nif not FileNameSavePath.EndsWith(".gma") :\n  Directory.CreateDirectory(addon)\n  if File.Exists(Path.Combine(addon, FileNameNoPath)) : \n    File.Delete(Path.Combine(addon, FileNameNoPath))\n  File.Move(FileNameSavePath, Path.Combine(addon, FileNameNoPath))\n  Script.Exit();\n \n#Important: Only 7zip 9.20 is able to extract the file.\nif Environment.OSVersion.Platform == PlatformID.Win32NT :\n  _7zaurl="https://www.7-zip.org/a/7za920.zip"\n  _7zazip=Path.Combine(TCAdminFolder, "Monitor", "Tools", "7za.zip")\n  _7zapath=Path.Combine(TCAdminFolder, "Monitor", "Tools", "7za")\n  _7zaexe = Path.Combine(_7zapath, "7za.exe")\n  gmad = Path.Combine(ThisService.RootDirectory, "bin", "gmad.exe")\nelse :\n  _7zaurl="http://cdnsource.tcadmin.net/games/__files/p7zip_9.20_x86_linux_bin.tar.bz2"\n  _7zazip=Path.Combine(TCAdminFolder, "Monitor", "Tools", "7za.tar.bz2")\n  _7zapath=Path.Combine(TCAdminFolder, "Monitor", "Tools", "7za")\n  _7zaexe = Path.Combine(_7zapath, "p7zip_9.20", "bin", "7za")\n  gmad = Path.Combine(ThisService.RootDirectory, "bin", "gmad_linux")\n  Linux.MakeExecutable(gmad)\n  \n#Download 7zip if needed.\nif not File.Exists(_7zaexe) :\n  Script.WriteToConsole("Downloading 7zip...")\n  wc = WebClient()\n  wc.DownloadFile(_7zaurl, _7zazip);\n  c=CompressionTools()\n  c.Decompress(_7zazip, _7zapath)\n  File.Delete(_7zazip)\n \n#Only files downloaded from URL need to be extracted\nif urldownload :\n  p = Process()\n  p.StartInfo.FileName=_7zaexe\n  p.StartInfo.Arguments=String.Format(\'e -y -o"{0}" "{1}"\', addon, FileNameSavePath)\n  p.StartInfo.WorkingDirectory=ThisService.WorkingDirectory\n  p.Start()\n  p.WaitForExit()\n  extractedfile=Path.Combine(addon, FileNameNoPath).Replace(".gma", String.Empty)\n  realgma=Path.Combine(ThisService.RootDirectory, "garrysmod", "addons", String.Format("{0}.gma", FileId))\n  if File.Exists(realgma) : \n    File.Delete(realgma)\n  File.Move(extractedfile, realgma)\nelse :\n  realgma=Path.Combine(Path.Combine(ThisService.RootDirectory, "garrysmod", "addons"), FileId.ToString() + ".gma")\n  if File.Exists(realgma) : \n    File.Delete(realgma)\n  File.Move(FileNameSavePath, realgma)\n   \np = Process()\np.StartInfo.FileName=gmad\np.StartInfo.Arguments=String.Format(\'extract -file "{0}"\', realgma)\np.StartInfo.WorkingDirectory=addon\np.Start()\np.WaitForExit()\n \nFile.Delete(realgma)\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-uninstalled-4",children:"After Workshop Content Uninstalled"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," After Workshop Content Uninstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," AfterWorkshopUninstall"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nfrom System.IO import Directory, Path\n \naddon = Path.Combine(ThisService.RootDirectory, "garrysmod", "addons", FileId.ToString())\nif Directory.Exists(addon) : \n  Directory.Delete(addon, True);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"space-engineers",children:"Space Engineers"}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-installed-5",children:"After Workshop Content Installed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Adds mod info."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Installed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nclr.AddReference("System.Xml")\n \nfrom System import Exception\nfrom System import String\nfrom System.IO import Path\nfrom System.Xml import XmlDocument\n \nconfigpath=Path.Combine(ThisService.RootDirectory, "Sandbox.sbc")\nxmldoc = XmlDocument()\nxmldoc.Load(configpath)\n \nmods=xmldoc.SelectSingleNode("MyObjectBuilder_Checkpoint/Mods")\nif mods is None:\n  raise Exception("Could not find Mods section")\n   \n#Add only if mod does not exist\nmodinfo=mods.SelectSingleNode(String.Format("ModItem[PublishedFileId=\'{0}\']", FileId))\nif modinfo is None:\n   modinfo = xmldoc.CreateElement("ModItem")\n   modname = xmldoc.CreateElement("Name")\n   modfileid = xmldoc.CreateElement("PublishedFileId")\n   modname.InnerText=String.Format("{0}.sbm", FileId)\n   modfileid.InnerText=FileId.ToString()\n   modinfo.AppendChild(modname)\n   modinfo.AppendChild(modfileid)\n   mods.AppendChild(modinfo)\n   xmldoc.Save(configpath)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"after-workshop-content-uninstalled-5",children:"After Workshop Content Uninstalled"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operating System:"})," Any"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Adds mod info."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Engine:"})," IronPython"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event:"})," After Workshop Content Uninstalled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ignore execution errors:"})," Unchecked"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import clr\nclr.AddReference("System.Xml")\n \nfrom System import Exception\nfrom System import String\nfrom System.IO import Path\nfrom System.Xml import XmlDocument\n \nconfigpath=Path.Combine(ThisService.RootDirectory, "Sandbox.sbc")\nxmldoc = XmlDocument()\nxmldoc.Load(configpath)\n \nmods=xmldoc.SelectSingleNode("MyObjectBuilder_Checkpoint/Mods")\nif mods is None:\n  raise Exception("Could not find Mods section")\n \n#Remove mod and save file only if the mod exists in the file\nmodinfo=mods.SelectSingleNode(String.Format("ModItem[PublishedFileId=\'{0}\']", FileId))\nif not modinfo is None:\n  mods.RemoveChild(modinfo)\n  xmldoc.Save(configpath)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"known-issues",children:"Known Issues"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"The remote server returned an error: (429) Too Many Requests."})," - This is a temporary error from the Steam api. Wait a few seconds and start the task again."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8380:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/Workshop_Browser-7f6ef739bb834a89fb04cc428b1b5689.png"}}]);