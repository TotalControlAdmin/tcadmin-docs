"use strict";(self.webpackChunktcadmin_docs=self.webpackChunktcadmin_docs||[]).push([[8005],{3767:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"customizations/scripts/general-scripts/backup-restore-scripts-with-ftp-support","title":"Backup & Restore Scripts with FTP Support","description":"These scripts are a modified version of Backup & Restore_Scripts. Instead of keeping a local copy of the zip it will get uploaded to FTP. Locally in the backups folder you will see a zip with 0 bytes. This is used to remember which files have been uploaded.","source":"@site/docs/customizations/scripts/general-scripts/backup-restore-scripts-with-ftp-support.mdx","sourceDirName":"customizations/scripts/general-scripts","slug":"/customizations/scripts/general-scripts/backup-restore-scripts-with-ftp-support","permalink":"/customizations/scripts/general-scripts/backup-restore-scripts-with-ftp-support","draft":false,"unlisted":false,"editUrl":"https://github.com/TotalControlAdmin/tcadmin-docs/blob/master/docs/customizations/scripts/general-scripts/backup-restore-scripts-with-ftp-support.mdx","tags":[],"version":"current","lastUpdatedAt":1736865147000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"sidebar_label":"Backup & Restore Scripts with FTP Support"},"sidebar":"tutorialSidebar","previous":{"title":"Backup & Restore Scripts","permalink":"/customizations/scripts/general-scripts/backup-restore-scripts"},"next":{"title":"Check slots, ip and port in config file before starting","permalink":"/customizations/scripts/general-scripts/check-slots-ip-ports-in-config-file-before-starting"}}');var s=r(4848),i=r(8453);const o={sidebar_position:5,sidebar_label:"Backup & Restore Scripts with FTP Support"},c="Backup & Restore Scripts with FTP Support",a={},l=[{value:"Secure your Backups folder",id:"secure-your-backups-folder",level:2},{value:"Create the variable",id:"create-the-variable",level:2},{value:"Create the scripts",id:"create-the-scripts",level:2}];function p(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"backup--restore-scripts-with-ftp-support",children:"Backup & Restore Scripts with FTP Support"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["These scripts are a modified version of ",(0,s.jsx)(n.a,{href:"/customizations/scripts/general-scripts/backup-restore-scripts",children:"Backup & Restore_Scripts"}),". Instead of keeping a local copy of the zip it will get uploaded to FTP. Locally in the backups folder you will see a zip with 0 bytes. This is used to remember which files have been uploaded."]})}),"\n",(0,s.jsx)(n.h2,{id:"secure-your-backups-folder",children:"Secure your Backups folder"}),"\n",(0,s.jsx)(n.admonition,{title:"Urgent Warning: Critical Configuration Step - Neglect at Your Peril!",type:"danger",children:(0,s.jsx)(n.p,{children:"Failure to execute this pivotal step in the configuration process will render your server alarmingly susceptible to exploitations and security breaches."})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Go to Settings > Games > Select the game > File System Permissions."}),"\n",(0,s.jsx)(n.li,{children:"Expand User Files and select Add permissions by subdirectory."}),"\n",(0,s.jsxs)(n.li,{children:["Configure these values:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Subdirectory Path: Backups"}),"\n",(0,s.jsx)(n.li,{children:'Permissions: "no permissions"'}),"\n",(0,s.jsx)(n.li,{children:"Click on Add."}),"\n",(0,s.jsx)(n.li,{children:'Add the same permission for "Sub Admin Files" and "Reseller Files".'}),"\n",(0,s.jsx)(n.li,{children:"Click on Save."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"create-the-variable",children:"Create the variable"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Configure a variable used by the restore script. Go to Settings > Games > Select the game > Variables (it can also be a global variable). Create this variable:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Name:"})," BackupFile"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Script parameter:"})," Checked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Admin access:"})," Checked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sub admin access:"})," Checked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reseller access:"})," Checked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User access:"})," Checked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server owner access:"})," Checked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Value is required:"})," Checked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Required Message:"})," The backup file is required."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Item Type:"})," Combobox"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Label:"})," Backup:"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Select the backup to restore."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Source:"})," File System"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filter Type:"})," Files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filter:"})," Backups/*.zip"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Item Value:"})," Full path"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Item Display:"})," Name (no extension)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"create-the-scripts",children:"Create the scripts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Go back to the game's main settings. Click on the Custom Scripts icon. Add the following scripts. They can also be configured as global scripts."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Operating System:"})," Any",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Name:"})," Backup Your Settings",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Description:"})," Create a backup of your game server's settings.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Script Engine:"})," IronPython",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Event:"})," Custom Icon",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Sub admin access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Reseller access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"User access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Server owner access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Stop service before executing:"})," Check if you want to stop the game server before creating the backup.",(0,s.jsx)(n.br,{}),"\n","Script: Configure BACKUP_LOCATION, MAX_BACKUPS, BACKUP_EXTENSIONS, FOLDER_TO_BACKUP, BACKUP_FTP_IP, BACKUP_FTP_PORT, BACKUP_FTP_USER, BACKUP_FTP_PASSWORD, BACKUP_FTP_PATH as needed."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"If you change the backup location remember to update your file system permissions."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import clr;\nclr.AddReference("TCAdmin.SDK");\n\nimport System;\nfrom System import Array, String, DateTime, Exception, Environment, PlatformID\nfrom System.IO import Path, DirectoryInfo, SearchOption\nfrom System.Collections.Generic import List\nfrom System.Globalization import CultureInfo\nfrom TCAdmin.SDK.Misc import CompressionTools, Linux, Windows\n\nclr.AddReference("System.Core")\nclr.ImportExtensions(System.Linq)\n\n# FTP support\nfrom System.Net import WebRequest, WebRequestMethods, NetworkCredential\nfrom System.IO import StreamReader, File\nfrom System.Text import Encoding\n\n# FTP Connection\nFTP_IP = "BACKUP_FTP_IP"\nFTP_PORT = BACKUP_FTP_PORT\nFTP_USER = "BACKUP_FTP_USERNAME"\nFTP_PASSWORD = "BACKUP_FTP_PASSWORD"\n# FTP Path should be something like /Backups/{0}\nFTP_BACKUP_PATH = String.Format("/BACKUP_FTP_PATH/{0}", ThisService.ServiceId)\n# Enable support for FTPS\nENABLE_FTP_SSL = False\n\n# Specify where backups are saved.\n# Default location is a folder named Backups in the game server\'s root.\nBACKUP_LOCATION = Path.Combine(ThisService.RootDirectory, "Backups")\n\n# Specify the maximum number of backups to keep.\nMAX_BACKUPS = 5\n\n# Extension of files that will be included in the backup.\n# Only specify config file extensions to keep file size small. Avoid log extensions.\n# For security do not backup executables (.exe, .dll or .so, etc). Use ".*" to backup all extensions in the specified folder.\nBACKUP_EXTENSIONS = Array[str]([".cfg", ".lua", ".properties", ".txt"])\n\n# Extensions that are excluded from the backup. (only used if you specify ".*" in BACKUP_EXTENSIONS)\nBACKUP_EXCLUDE_EXTENSIONS = Array[str]([".xxx"])\n\nbackupfilename = String.Format("{0}.zip", DateTime.Now.ToString("yyyyMMdd-HHmmss", CultureInfo.InvariantCulture))\nbackupfiles = List[str]()\n\n####################################################################################################################################### \n# COPY THIS BLOCK IF YOU WANT TO BACKUP MORE THAN 1 PATH ##############################################################################\n#######################################################################################################################################\n# Specify the folder to backup. Sub folders will be included in the backup.\n# All files with the extensions specified in BACKUP_EXTENSIONS will be added to the backup.\n# Set value to ThisService.RootDirectory if you want to backup all specified extensions in the game server\'s root folder and sub folders.\n# This example will backup the path RootDirectory\\garrysmod\\cfg\nFOLDER_TO_BACKUP = Path.Combine(ThisService.RootDirectory, "garrysmod", "cfg")\nbackupdir = DirectoryInfo(FOLDER_TO_BACKUP)\nallfiles = backupdir.GetFiles("*", SearchOption.AllDirectories)\nfor file in allfiles:\n  if not file.FullName.StartsWith(BACKUP_LOCATION) :\n    if Array.IndexOf(BACKUP_EXTENSIONS, file.Extension) != -1 or (Array.IndexOf(BACKUP_EXTENSIONS, ".*") != -1 and Array.IndexOf(BACKUP_EXCLUDE_EXTENSIONS, file.Extension) == -1 ) :\n      backupfiles.Add(file.FullName.Replace(ThisService.RootDirectory, String.Empty).TrimStart(Path.DirectorySeparatorChar))\n#######################################################################################################################################\n#######################################################################################################################################\nif backupfiles.Count == 0 :\n  raise Exception("Didn\\\'t find any files to backup.")\n\nScript.WriteToConsole(String.Format("Backing up {0} files to {1}...", backupfiles.Count, backupfilename))\n\nbackuplocation = DirectoryInfo(BACKUP_LOCATION)\nif not backuplocation.Exists :\n  backuplocation.Create()\n\ncompressiontools = CompressionTools()\ncompressiontools.Compress(ThisService.RootDirectory, backupfiles.ToArray(), Path.Combine(BACKUP_LOCATION, backupfilename))\nScript.WriteToConsole("The backup was created successfully.")\n\n# FTP SUPPORT\nScript.WriteToConsole("")\nScript.WriteToConsole("Uploading backup to FTP...")\n\n# CREATE PATH IN FTP\ntry :\n  request=WebRequest.Create(String.Format("ftp://{0}:{1}{2}", FTP_IP, FTP_PORT, FTP_BACKUP_PATH))\n  request.Credentials = NetworkCredential(FTP_USER, FTP_PASSWORD)\n  request.Method = WebRequestMethods.Ftp.MakeDirectory\n  request.EnableSsl = ENABLE_FTP_SSL\n  with request.GetResponse() as response:\n    Script.WriteToConsole(String.Format("Create Directory Complete, status: {0}", response.StatusDescription))\nexcept:\n  pass\n\n# UPLOAD FILE\nrequest = WebRequest.Create(String.Format("ftp://{0}:{1}{2}/{3}", FTP_IP, FTP_PORT, FTP_BACKUP_PATH, backupfilename))\nrequest.Credentials = NetworkCredential(FTP_USER, FTP_PASSWORD)\nrequest.Method = WebRequestMethods.Ftp.UploadFile\nrequest.EnableSsl = ENABLE_FTP_SSL\nwith File.OpenRead(Path.Combine(BACKUP_LOCATION, backupfilename)) as fileStream:\n  request.ContentLength = fileStream.Length\n  with request.GetRequestStream() as ftpStream:\n    fileStream.CopyTo(ftpStream)\n\n# MAKE LOCAL FILE 0 BYTES. IT\'S A PLACE HOLDER JUST SO WE KNOW WHAT\'S IN FTP\nFile.Create(Path.Combine(BACKUP_LOCATION, backupfilename)).Close()  \n\n# DELETE OLD BACKUPS\nScript.WriteToConsole("")\nbackupfiles=backuplocation.GetFiles("*.zip").OrderBy(lambda f: f.CreationTime).ToArray()\nfor i in range(0,backupfiles.Count - MAX_BACKUPS):\n  # DELETE FROM FTP\n  try :\n    request = WebRequest.Create(String.Format("ftp://{0}:{1}{2}/{3}", FTP_IP, FTP_PORT, FTP_BACKUP_PATH, backupfiles[i].Name))\n    request.Credentials = NetworkCredential(FTP_USER, FTP_PASSWORD)\n    request.Method = WebRequestMethods.Ftp.DeleteFile\n    request.EnableSsl = ENABLE_FTP_SSL\n    with request.GetResponse() as response:\n      Script.WriteToConsole(String.Format("Deleted previous FTP backup {0}, status: {1}", backupfiles[i].Name, response.StatusDescription))\n  except :\n    pass\n  # DELETE LOCAL FILE\n  backupfiles[i].Delete()\n  Script.WriteToConsole(String.Format ("Deleted previous local backup: {0}", backupfiles[i].Name))\n\nif Environment.OSVersion.Platform == PlatformID.Unix :\n  if Linux.IsRoot() :\n    Linux.SetDirectoryOwnerAutoDetect(BACKUP_LOCATION, True)\nelse :\n owner = Windows.GetOwner(ThisService.RootDirectory)\n Windows.SetDirectoryOwner(BACKUP_LOCATION, str(owner), True)\n\nScript.WriteToConsole("")\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Operating System:"})," Any",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Name:"})," Backup Your Settings",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Description:"})," Restore your game server's settings from a backup.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Script Engine:"})," IronPython",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Event:"})," Custom Icon",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Sub admin access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Reseller access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"User access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Server owner access:"})," Checked",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Stop service before executing:"})," heck if you want to stop the game server before restoring the backup.",(0,s.jsx)(n.br,{}),"\n","Script: Configure BACKUP_FTP_IP, BACKUP_FTP_PORT, BACKUP_FTP_USER, BACKUP_FTP_PASSWORD, BACKUP_FTP_PATH as needed."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"If you change the backup location remember to update your file system permissions."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import clr;\nclr.AddReference("TCAdmin.SDK");\n\nfrom System.IO import Path\nfrom System import String, Environment, PlatformID\nfrom TCAdmin.SDK.Misc import CompressionTools, Linux, Windows\n\n# FTP support\nfrom System.Net import WebRequest, WebRequestMethods, NetworkCredential\nfrom System.IO import StreamReader, File, FileStream\nfrom System.Text import Encoding\n\n# FTP Connection\nFTP_IP = "BACKUP_FTP_IP"\nFTP_PORT = BACKUP_FTP_PORT\nFTP_USER = "BACKUP_FTP_USERNAME"\nFTP_PASSWORD = "BACKUP_FTP_PASSWORD"\n# FTP Path should be something like /Backups/{0}\nFTP_BACKUP_PATH = String.Format("/BACKUP_FTP_PATH/{0}", ThisService.ServiceId)\n# Enable support for FTPS\nENABLE_FTP_SSL = False\n\n# DOWNLOAD FILE\nScript.WriteToConsole(String.Format("Downloading backup {0}...", Path.GetFileNameWithoutExtension(ThisService.Variables["BackupFile"])))\nrequest = WebRequest.Create(String.Format("ftp://{0}:{1}{2}/{3}", FTP_IP, FTP_PORT, FTP_BACKUP_PATH, Path.GetFileName(ThisService.Variables["BackupFile"])))\nrequest.Credentials = NetworkCredential(FTP_USER, FTP_PASSWORD)\nrequest.Method = WebRequestMethods.Ftp.DownloadFile\nrequest.EnableSsl = ENABLE_FTP_SSL\nwith request.GetResponse().GetResponseStream() as ftpStream :\n  with File.Create(ThisService.Variables["BackupFile"]) as fileStream:\n    ftpStream.CopyTo(fileStream)\n\nScript.WriteToConsole(String.Format("Restoring backup {0}...", Path.GetFileNameWithoutExtension(ThisService.Variables["BackupFile"])))\n\ncompressiontools = CompressionTools()\ncompressiontools.Decompress(ThisService.Variables["BackupFile"], ThisService.RootDirectory)\n\n# MAKE LOCAL FILE 0 BYTES. IT\'S A PLACE HOLDER JUST SO WE KNOW WHAT\'S IN FTP\nFile.Create(ThisService.Variables["BackupFile"]).Close()  \n\nif Environment.OSVersion.Platform == PlatformID.Unix :\n  if Linux.IsRoot() :\n    Linux.SetDirectoryOwnerAutoDetect(ThisService.RootDirectory, True);\nelse:\n owner = Windows.GetOwner(ThisService.RootDirectory);\n Windows.SetDirectoryOwner(ThisService.RootDirectory, str(owner), True);\n\nScript.WriteToConsole("The backup was restored successfully.")\n                                 \nScript.WriteToConsole("")\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Operating System:"})," Any",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Name:"})," Keep backups before reinstall",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Description:"})," Moves backups outside of root.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Script Engine:"})," IronPython",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Event:"})," Before reinstall\nIgnore execution errors: Unchecked (if it fails you don't want to lose the backups)"]}),"\n",(0,s.jsx)(n.p,{children:"Script: Configure BACKUP_LOCATION"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import clr;\n\nfrom System import String\nfrom System.IO import Path, Directory\n\n# Specify where backups are saved.\n# Default location is a folder named Backups in the game server\'s root.\nBACKUP_LOCATION = Path.Combine(ThisService.RootDirectory, "Backups")\n\ntemp_location = Path.Combine(ThisService.RootDirectory, "..", String.Format("_{0}_Backups", ThisService.ServiceId))\nif Directory.Exists(BACKUP_LOCATION) :\n  Directory.Move(BACKUP_LOCATION, temp_location)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Operating System:"})," Any",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Name:"})," Restore backups after install",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Description:"})," Moves backups back into root.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Script Engine:"})," IronPython",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Event:"})," After reinstall",(0,s.jsx)(n.br,{}),"\n","Script: Configure BACKUP_LOCATION"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import clr;\n\nfrom System import String\nfrom System.IO import Path, Directory\n\n# Specify where backups are saved.\n# Default location is a folder named Backups in the game server\'s root.\nBACKUP_LOCATION = Path.Combine(ThisService.RootDirectory, "Backups")\n\ntemp_location = Path.Combine(ThisService.RootDirectory, "..", String.Format("_{0}_Backups", ThisService.ServiceId))\nif Directory.Exists(temp_location) :\n  Directory.Move(temp_location, BACKUP_LOCATION)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Operating System:"})," Any",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Name:"})," Deletes backups",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Description:"})," Delete backups when service is deleted",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Script Engine:"})," IronPython",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Event:"})," Before delete",(0,s.jsx)(n.br,{}),"\n","Script: Configure BACKUP_LOCATION, BACKUP_FTP_IP, BACKUP_FTP_PORT, BACKUP_FTP_USER, BACKUP_FTP_PASSWORD, BACKUP_FTP_PATH as needed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import clr;\nclr.AddReference("TCAdmin.SDK");\n \nimport System;\nfrom System import Array, String, DateTime, Exception, Environment, PlatformID\nfrom System.IO import Path, DirectoryInfo, SearchOption\nfrom System.Collections.Generic import List\nfrom System.Globalization import CultureInfo\nfrom TCAdmin.SDK.Misc import CompressionTools, Linux, Windows\n \nclr.AddReference("System.Core")\nclr.ImportExtensions(System.Linq)\n \n# FTP support\nfrom System.Net import WebRequest, WebRequestMethods, NetworkCredential\nfrom System.IO import StreamReader, File\nfrom System.Text import Encoding\n \n# FTP Connection\nFTP_IP = "BACKUP_FTP_IP"\nFTP_PORT = BACKUP_FTP_PORT\nFTP_USER = "BACKUP_FTP_USERNAME"\nFTP_PASSWORD = "BACKUP_FTP_PASSWORD"\n# FTP Path should be something like /Backups/{0}\nFTP_BACKUP_PATH = String.Format("/BACKUP_FTP_PATH/{0}", ThisService.ServiceId)\n# Enable support for FTPS\nENABLE_FTP_SSL = False\n \n# Specify where backups are saved.\n# Default location is a folder named Backups in the game server\'s root.\nBACKUP_LOCATION = Path.Combine(ThisService.RootDirectory, "Backups")\n \n# FTP SUPPORT\nScript.WriteToConsole("")\nScript.WriteToConsole("Deleting files from FTP...")\n \nbackuplocation = DirectoryInfo(BACKUP_LOCATION)\n \n# DELETE OLD BACKUPS\nScript.WriteToConsole("")\nbackupfiles=backuplocation.GetFiles("*.zip").OrderBy(lambda f: f.CreationTime).ToArray()\nfor i in range(0, backupfiles.Count):\n  # DELETE FROM FTP\n  try :\n    request = WebRequest.Create(String.Format("ftp://{0}:{1}{2}/{3}", FTP_IP, FTP_PORT, FTP_BACKUP_PATH, backupfiles[i].Name))\n    request.Credentials = NetworkCredential(FTP_USER, FTP_PASSWORD)\n    request.Method = WebRequestMethods.Ftp.DeleteFile\n    request.EnableSsl = ENABLE_FTP_SSL\n    with request.GetResponse() as response:\n      Script.WriteToConsole(String.Format("Deleted previous FTP backup {0}, status: {1}", backupfiles[i].Name, response.StatusDescription))\n  except :\n    pass\n  # DELETE LOCAL FILE\n  backupfiles[i].Delete()\n  Script.WriteToConsole(String.Format ("Deleted previous local backup: {0}", backupfiles[i].Name))\n \n# DELETE PATH IN FTP\ntry :\n  request=WebRequest.Create(String.Format("ftp://{0}:{1}{2}", FTP_IP, FTP_PORT, FTP_BACKUP_PATH))\n  request.Credentials = NetworkCredential(FTP_USER, FTP_PASSWORD)\n  request.Method = WebRequestMethods.Ftp.RemoveDirectory\n  request.EnableSsl = ENABLE_FTP_SSL\n  with request.GetResponse() as response:\n    Script.WriteToConsole(String.Format("Create Directory Complete, status: {0}", response.StatusDescription))\nexcept:\n  pass\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);