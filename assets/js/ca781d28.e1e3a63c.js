"use strict";(self.webpackChunktcadmin_docs=self.webpackChunktcadmin_docs||[]).push([[9604],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),k=a,d=m["".concat(p,".").concat(k)]||m[k]||u[k]||i;return r?n.createElement(d,o(o({ref:t},c),{},{components:r})):n.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}k.displayName="MDXCreateElement"},5622:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:4,sidebar_label:"Backup & Restore Scripts"},o="Backup & Restore Scripts",s={unversionedId:"customizations/scripts/general-scripts/backup-restore-scripts",id:"customizations/scripts/general-scripts/backup-restore-scripts",title:"Backup & Restore Scripts",description:"Secure your Backups folder",source:"@site/docs/customizations/scripts/general-scripts/backup-restore-scripts.mdx",sourceDirName:"customizations/scripts/general-scripts",slug:"/customizations/scripts/general-scripts/backup-restore-scripts",permalink:"/customizations/scripts/general-scripts/backup-restore-scripts",draft:!1,editUrl:"https://github.com/TotalControlAdmin/tcadmin-docs/blob/master/docs/customizations/scripts/general-scripts/backup-restore-scripts.mdx",tags:[],version:"current",lastUpdatedAt:1698914704,formattedLastUpdatedAt:"Nov 2, 2023",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Backup & Restore Scripts"},sidebar:"tutorialSidebar",previous:{title:"Automatically Create a MySQL Database",permalink:"/customizations/scripts/general-scripts/automatically-create-mysql-database"},next:{title:"Backup & Restore Scripts with FTP Support",permalink:"/customizations/scripts/general-scripts/backup-restore-scripts-with-ftp-support"}},p={},l=[{value:"Secure your Backups folder",id:"secure-your-backups-folder",level:2},{value:"Create the variable",id:"create-the-variable",level:2},{value:"Create the scripts",id:"create-the-scripts",level:2}],c={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"backup--restore-scripts"},"Backup & Restore Scripts"),(0,a.kt)("h2",{id:"secure-your-backups-folder"},"Secure your Backups folder"),(0,a.kt)("admonition",{title:"Urgent Warning: Critical Configuration Step - Neglect at Your Peril!",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Failure to execute this pivotal step in the configuration process will render your server alarmingly susceptible to exploitations and security breaches.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Go to ",(0,a.kt)("inlineCode",{parentName:"li"},"Settings")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"Games")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"Select the game")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"File System Permissions"),"."),(0,a.kt)("li",{parentName:"ul"},"Expand User Files and select ",(0,a.kt)("strong",{parentName:"li"},"Add permissions by subdirectory"),"."),(0,a.kt)("li",{parentName:"ul"},"Configure these values:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Subdirectory Path: Backups"),(0,a.kt)("li",{parentName:"ul"},"Permissions:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If you don't want to allow manual download of the backup files set it to ",(0,a.kt)("inlineCode",{parentName:"li"},"no permissions"),"."),(0,a.kt)("li",{parentName:"ul"},"If you want to allow the user to download and delete backups set it to ",(0,a.kt)("inlineCode",{parentName:"li"},"Basic permissions")," and check ",(0,a.kt)("inlineCode",{parentName:"li"},"Read")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Delete"),". ",(0,a.kt)("strong",{parentName:"li"},'DO NOT check "write".')))))),(0,a.kt)("li",{parentName:"ul"},"Click on Add."),(0,a.kt)("li",{parentName:"ul"},"Add the same permission for ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"Sub Admin Files"))," and ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"Reseller Files")),"."),(0,a.kt)("li",{parentName:"ul"},"Click on Save.")),(0,a.kt)("h2",{id:"create-the-variable"},"Create the variable"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Configure a variable used by the restore script"),". Go to ",(0,a.kt)("inlineCode",{parentName:"li"},"Settings")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"Games")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"Select the game")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"Variables")," (it can also be a global variable). Create this variable:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Name:")," BackupFile"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Script parameter:")," Checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Admin access:")," Checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Sub admin access:")," Checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Reseller access:")," Checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"User access:")," Checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Server owner access:")," Checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Value is required:")," Checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Required Message:")," The backup file is required."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Item Type:")," Combobox"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Label:")," Backup:"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Description:")," Select the backup to restore."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Source:")," File System"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Filter Type:")," Files"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Filter:")," Backups/*.zip"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Item Value:")," Full path"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Item Display:")," Name (no extension)")))),(0,a.kt)("h2",{id:"create-the-scripts"},"Create the scripts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Go back to the game's main settings. Click on the Custom Scripts icon. Add the following scripts. They can also be configured as global scripts.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Operating System:")," Any",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Name:")," Backup Your Settings",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Description:")," Create a backup of your game server's settings.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Script Engine:")," IronPython",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Event:")," Custom Icon",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Sub admin access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Reseller access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"User access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Server owner access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Stop service before executing:")," Check if you want to stop the game server before creating the backup.",(0,a.kt)("br",{parentName:"p"}),"\n","Script: Configure BACKUP_LOCATION, MAX_BACKUPS, BACKUP_EXTENSIONS, FOLDER_TO_BACKUP as needed."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you change the backup location remember to update your file system permissions.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import clr;\nclr.AddReference("TCAdmin.SDK");\n\nimport System;\nfrom System import Array, String, DateTime, Exception, Environment, PlatformID\nfrom System.IO import Path, DirectoryInfo, SearchOption\nfrom System.Collections.Generic import List\nfrom System.Globalization import CultureInfo\nfrom TCAdmin.SDK.Misc import CompressionTools, Linux, Windows\n\nclr.AddReference("System.Core")\nclr.ImportExtensions(System.Linq)\n\n# Specify where backups are saved.\n# Default location is a folder named Backups in the game server\'s root.\nBACKUP_LOCATION = Path.Combine(ThisService.RootDirectory, "Backups")\n\n# Specify the maximum number of backups to keep.\nMAX_BACKUPS = 5\n\n# Extension of files that will be included in the backup.\n# Only specify config file extensions to keep file size small. Avoid log extensions.\n# For security do not backup executables (.exe, .dll or .so, etc). Use ".*" to backup all extensions in the specified folder.\nBACKUP_EXTENSIONS = Array[str]([".cfg", ".lua", ".properties", ".txt"])\n\n# Extensions that are excluded from the backup. (only used if you specify ".*" in BACKUP_EXTENSIONS)\nBACKUP_EXCLUDE_EXTENSIONS = Array[str]([".xxx"])\n\nbackupfilename = String.Format("{0}.zip", DateTime.Now.ToString("yyyyMMdd-HHmmss", CultureInfo.InvariantCulture))\nbackupfiles = List[str]()\n\n####################################################################################################################################### \n# COPY THIS BLOCK IF YOU WANT TO BACKUP MORE THAN 1 PATH ##############################################################################\n#######################################################################################################################################\n# Specify the folder to backup. Sub folders will be included in the backup.\n# All files with the extensions specified in BACKUP_EXTENSIONS will be added to the backup.\n# Set value to ThisService.RootDirectory if you want to backup all specified extensions in the game server\'s root folder and sub folders.\n# This example will backup the path RootDirectory\\garrysmod\\cfg\nFOLDER_TO_BACKUP = Path.Combine(ThisService.RootDirectory, "garrysmod", "cfg")\nbackupdir = DirectoryInfo(FOLDER_TO_BACKUP)\nallfiles = backupdir.GetFiles("*", SearchOption.AllDirectories)\nfor file in allfiles:\n  if not file.FullName.StartsWith(BACKUP_LOCATION) :\n    if Array.IndexOf(BACKUP_EXTENSIONS, file.Extension) != -1 or (Array.IndexOf(BACKUP_EXTENSIONS, ".*") != -1 and Array.IndexOf(BACKUP_EXCLUDE_EXTENSIONS, file.Extension) == -1 ) :\n      backupfiles.Add(file.FullName.Replace(ThisService.RootDirectory, String.Empty).TrimStart(Path.DirectorySeparatorChar))\n####################################################################################################################################### \n#######################################################################################################################################\n   \nif backupfiles.Count == 0 :\n  raise Exception("Didn\\\'t find any files to backup.")\n\nScript.WriteToConsole(String.Format("Backing up {0} files to {1}...", backupfiles.Count, backupfilename))\n \nbackuplocation = DirectoryInfo(BACKUP_LOCATION)\nif not backuplocation.Exists :\n  backuplocation.Create()\n\ncompressiontools = CompressionTools()\ncompressiontools.Compress(ThisService.RootDirectory, backupfiles.ToArray(), Path.Combine(BACKUP_LOCATION, backupfilename))\nScript.WriteToConsole("The backup was created successfully.")\n\nbackupfiles=backuplocation.GetFiles("*.zip").OrderBy(lambda f: f.CreationTime).ToArray()\nfor i in range(0,backupfiles.Count - MAX_BACKUPS):\n  backupfiles[i].Delete()\n  Script.WriteToConsole(String.Format ("Deleted previous backup: {0}", backupfiles[i].Name))\n\nif Environment.OSVersion.Platform == PlatformID.Unix :\n  if Linux.IsRoot() :\n    Linux.SetDirectoryOwnerAutoDetect(BACKUP_LOCATION, True);\nelse :\n owner = Windows.GetOwner(ThisService.RootDirectory);\n Windows.SetDirectoryOwner(BACKUP_LOCATION, str(owner), True);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Operating System:")," Any",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Name:")," Restore Your Settings",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Description:")," Restore your game server's settings from a backup.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Script Engine:")," IronPython",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Event:")," Custom Icon",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Sub admin access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Reseller access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"User access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Server owner access:")," Checked",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Stop service before executing:")," Check if you want to stop the game server before restoring the backup.",(0,a.kt)("br",{parentName:"p"}),"\n","Script: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import clr;\nclr.AddReference("TCAdmin.SDK");\n\nfrom System.IO import Path\nfrom System import String, Environment, PlatformID\nfrom TCAdmin.SDK.Misc import CompressionTools, Linux, Windows\n\nScript.WriteToConsole(String.Format("Restoring backup {0}...", Path.GetFileNameWithoutExtension(ThisService.Variables["BackupFile"])))\n\ncompressiontools = CompressionTools()\ncompressiontools.Decompress(ThisService.Variables["BackupFile"], ThisService.RootDirectory)\n\nif Environment.OSVersion.Platform == PlatformID.Unix :\n  if Linux.IsRoot() :\n    Linux.SetDirectoryOwnerAutoDetect(ThisService.RootDirectory, True);\nelse:\n owner = Windows.GetOwner(ThisService.RootDirectory);\n Windows.SetDirectoryOwner(ThisService.RootDirectory, str(owner), True);\n\nScript.WriteToConsole("The backup was restored successfully.")\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Operating System:")," Any",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Name:")," Keep backups before reinstall",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Description:")," Moves backups outside of root.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Script Engine:")," IronPython",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Event:")," Before reinstall",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Ignore execution errors:")," Unchecked (if it fails you don't want to lose the backups)\n",(0,a.kt)("strong",{parentName:"p"},"Script:")," Configure BACKUP_LOCATION"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import clr;\n\nfrom System import String\nfrom System.IO import Path, Directory\n\n# Specify where backups are saved.\n# Default location is a folder named Backups in the game server\'s root.\nBACKUP_LOCATION = Path.Combine(ThisService.RootDirectory, "Backups")\n\ntemp_location = Path.Combine(ThisService.RootDirectory, "..", String.Format("_{0}_Backups", ThisService.ServiceId))\nif Directory.Exists(BACKUP_LOCATION) :\n  Directory.Move(BACKUP_LOCATION, temp_location)\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Operating System:")," Any",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Name:")," Restore backups after install",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Description:")," Moves backups back into root.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Script Engine:")," IronPython",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Event:")," After reinstall",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Script:")," Configure BACKUP_LOCATION"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import clr;\n\nfrom System import String\nfrom System.IO import Path, Directory\n\n# Specify where backups are saved.\n# Default location is a folder named Backups in the game server\'s root.\nBACKUP_LOCATION = Path.Combine(ThisService.RootDirectory, "Backups")\n\ntemp_location = Path.Combine(ThisService.RootDirectory, "..", String.Format("_{0}_Backups", ThisService.ServiceId))\nif Directory.Exists(temp_location) :\n  Directory.Move(temp_location, BACKUP_LOCATION)\n')))}u.isMDXComponent=!0}}]);